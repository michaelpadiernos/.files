/// <reference types="node" />
import { ImageInfo } from 'dockerode';
import { Observable } from 'rxjs';
import { ConfigService, Logger, LogService } from 'tabby-core';
export interface Container {
    id: string;
    names: string[];
    image: string;
    state: string;
}
export interface Image {
    id: string;
    description: string;
    tags: string[];
}
export declare class DockerProcess {
    private exec;
    get output$(): Observable<Buffer>;
    get closed$(): Observable<void>;
    private output;
    private closed;
    private stream;
    private dead;
    constructor(exec: any);
    start(): Promise<void>;
    resize(w: number, h: number): Promise<void>;
    write(data: Buffer): void;
    stop(): Promise<void>;
    private close;
}
export declare class DockerService {
    private config;
    logger: Logger;
    constructor(log: LogService, config: ConfigService);
    listContainers(): Promise<Container[]>;
    listImages(): Promise<Image[]>;
    createContainer(imageID: string, name: string, args: string[] | null): Promise<Container>;
    destroyContainer(containerID: string): Promise<void>;
    exec(containerID: string, args: string[]): Promise<DockerProcess>;
    getImageDescription(image: ImageInfo): string;
    private getDocker;
}
