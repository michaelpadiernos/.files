(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@angular/common"), require("@angular/core"), require("@angular/forms"), require("@ng-bootstrap/ng-bootstrap"), require("tabby-core"), require("tabby-settings"), require("fs"), require("@angular/cdk/drag-drop"), require("ngx-toastr"), require("tabby-electron"));
	else if(typeof define === 'function' && define.amd)
		define(["@angular/common", "@angular/core", "@angular/forms", "@ng-bootstrap/ng-bootstrap", "tabby-core", "tabby-settings", "fs", "@angular/cdk/drag-drop", "ngx-toastr", "tabby-electron"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("@angular/common"), require("@angular/core"), require("@angular/forms"), require("@ng-bootstrap/ng-bootstrap"), require("tabby-core"), require("tabby-settings"), require("fs"), require("@angular/cdk/drag-drop"), require("ngx-toastr"), require("tabby-electron")) : factory(root["@angular/common"], root["@angular/core"], root["@angular/forms"], root["@ng-bootstrap/ng-bootstrap"], root["tabby-core"], root["tabby-settings"], root["fs"], root["@angular/cdk/drag-drop"], root["ngx-toastr"], root["tabby-electron"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(global, (__WEBPACK_EXTERNAL_MODULE__angular_common__, __WEBPACK_EXTERNAL_MODULE__angular_core__, __WEBPACK_EXTERNAL_MODULE__angular_forms__, __WEBPACK_EXTERNAL_MODULE__ng_bootstrap_ng_bootstrap__, __WEBPACK_EXTERNAL_MODULE_tabby_core__, __WEBPACK_EXTERNAL_MODULE_tabby_settings__, __WEBPACK_EXTERNAL_MODULE_fs__, __WEBPACK_EXTERNAL_MODULE__angular_cdk_drag_drop__, __WEBPACK_EXTERNAL_MODULE_ngx_toastr__, __WEBPACK_EXTERNAL_MODULE_tabby_electron__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/settings-tab.component.html":
/*!*****************************************!*\
  !*** ./src/settings-tab.component.html ***!
  \*****************************************/
/***/ ((module) => {

// Module
var code = "<h3 translate>Background</h3>\n<ul class=\"nav-tabs\" ngbNav #nav=\"ngbNav\">\n  <li ngbNavItem>\n    <a ngbNavLink translate>Background</a>\n    <ng-template ngbNavContent>\n      <div class=\"form-line\">\n        <div class=\"header\">\n          <div class=\"title\" translate>Enable background</div>\n          <div class=\"description\" translate>Background image master switch</div>\n        </div>\n        <toggle [(ngModel)]=\"pluginConfig.backgroundEnabled\" (ngModelChange)=\"apply()\"> </toggle>\n      </div>\n\n      <div class=\"content-box\" *ngIf=\"pluginConfig.backgroundEnabled === true\">\n        <div class=\"form-line\">\n          <div class=\"header\">\n            <div class=\"title\" translate>Background mode</div>\n            <div class=\"description\" translate>Background mode</div>\n          </div>\n          <select\n            class=\"form-control\"\n            [(ngModel)]=\"pluginConfig.backgroundMode\"\n            (ngModelChange)=\"apply()\"\n          >\n            <option [ngValue]=\"'simple'\" translate>Simple</option>\n            <option [ngValue]=\"'advanced'\" translate>Advanced</option>\n          </select>\n        </div>\n        <div class=\"content-box\" *ngIf=\"pluginConfig.backgroundMode === 'simple'\">\n          <div class=\"form-line\">\n            <div class=\"header\">\n              <div class=\"title\" translate>Background path</div>\n              <div class=\"description\" translate>Relative path begins with ../../../data</div>\n            </div>\n            <div class=\"input-group w-50\">\n              <input\n                class=\"form-control\"\n                type=\"text\"\n                [(ngModel)]=\"pluginConfig.backgroundPath\"\n                (ngModelChange)=\"apply()\"\n              />\n              <button class=\"btn btn-secondary\" (click)=\"pickFile()\">\n                <i class=\"fas fa-folder-open\"> </i>\n              </button>\n            </div>\n          </div>\n          <div class=\"form-line\">\n            <div class=\"header\">\n              <div class=\"title\" translate>Background show type</div>\n            </div>\n            <div class=\"btn-group\">\n              <input\n                class=\"btn-check\"\n                type=\"radio\"\n                name=\"backgroundShowType\"\n                [(ngModel)]=\"pluginConfig.backgroundShowType\"\n                (ngModelChange)=\"apply()\"\n                id=\"showTypeFullscreen\"\n                [value]=\"'fullscreen'\"\n              />\n              <label class=\"btn btn-secondary\" for=\"showTypeFullscreen\">\n                <span translate>Fullscreen</span>\n              </label>\n              <input\n                class=\"btn-check\"\n                type=\"radio\"\n                name=\"backgroundShowType\"\n                [(ngModel)]=\"pluginConfig.backgroundShowType\"\n                (ngModelChange)=\"apply()\"\n                id=\"showTypeFullscreenFloat\"\n                [value]=\"'float'\"\n              />\n              <label class=\"btn btn-secondary\" for=\"showTypeFullscreenFloat\">\n                <span translate>Float</span>\n              </label>\n            </div>\n          </div>\n          <div class=\"content-box\" *ngIf=\"pluginConfig.backgroundShowType === 'fullscreen'\">\n            <div class=\"form-line\">\n              <div class=\"header\">\n                <div class=\"title\" translate>Fullscreen type</div>\n              </div>\n              <div class=\"btn-group\">\n                <input\n                  class=\"btn-check\"\n                  type=\"radio\"\n                  name=\"backgroundFullscreenType\"\n                  [(ngModel)]=\"pluginConfig.backgroundFullscreenType\"\n                  (ngModelChange)=\"apply()\"\n                  id=\"fullscreenTypeContain\"\n                  [value]=\"'contain'\"\n                />\n                <label class=\"btn btn-secondary\" for=\"fullscreenTypeContain\">\n                  <span translate>Contain</span>\n                </label>\n                <input\n                  class=\"btn-check\"\n                  type=\"radio\"\n                  name=\"backgroundFullscreenType\"\n                  [(ngModel)]=\"pluginConfig.backgroundFullscreenType\"\n                  (ngModelChange)=\"apply()\"\n                  id=\"fullscreenTypeCover\"\n                  [value]=\"'cover'\"\n                />\n                <label class=\"btn btn-secondary\" for=\"fullscreenTypeCover\">\n                  <span translate>Cover</span>\n                </label>\n              </div>\n            </div>\n            <div class=\"form-line\" *ngIf=\"pluginConfig.backgroundFullscreenType === 'contain'\">\n              <div class=\"header\">\n                <div class=\"title\" translate>Repeat type</div>\n              </div>\n              <div class=\"btn-group\">\n                <input\n                  class=\"btn-check\"\n                  type=\"radio\"\n                  name=\"backgroundFullscreenRepeatType\"\n                  [(ngModel)]=\"pluginConfig.backgroundFullscreenRepeatType\"\n                  (ngModelChange)=\"apply()\"\n                  id=\"fullscreenRepeatTypeRepeat\"\n                  [value]=\"'repeat'\"\n                />\n                <label class=\"btn btn-secondary\" for=\"fullscreenRepeatTypeRepeat\">\n                  <span translate>Repeat</span>\n                </label>\n                <input\n                  class=\"btn-check\"\n                  type=\"radio\"\n                  name=\"backgroundFullscreenRepeatType\"\n                  [(ngModel)]=\"pluginConfig.backgroundFullscreenRepeatType\"\n                  (ngModelChange)=\"apply()\"\n                  id=\"fullscreenRepeatTypeNoRepeat\"\n                  [value]=\"'no-repeat'\"\n                />\n                <label class=\"btn btn-secondary\" for=\"fullscreenRepeatTypeNoRepeat\">\n                  <span translate>No Repeat</span>\n                </label>\n              </div>\n            </div>\n          </div>\n          <div class=\"content-box\" *ngIf=\"pluginConfig.backgroundShowType === 'float'\">\n            <h4 translate>Float Parameters</h4>\n            <div class=\"form-line\">\n              <div class=\"header\">\n                <div class=\"title\" translate>Float size</div>\n                <div class=\"description\" translate>Unit: px</div>\n              </div>\n              <input\n                class=\"me-3\"\n                type=\"range\"\n                [(ngModel)]=\"pluginConfig.backgroundFloatSize\"\n                (mouseup)=\"apply()\"\n                min=\"0\"\n                max=\"1000\"\n                step=\"1\"\n              />\n              <button\n                class=\"btn btn-outline-secondary me-3\"\n                (click)=\"pluginConfig.backgroundFloatSize = 300; apply()\"\n              >\n                <i class=\"fas fa-solid fa-rotate-left\"> </i>\n              </button>\n              <input\n                class=\"form-control param-input\"\n                type=\"number\"\n                min=\"0\"\n                [(ngModel)]=\"pluginConfig.backgroundFloatSize\"\n                (ngModelChange)=\"apply()\"\n              />\n            </div>\n            <div class=\"form-line\">\n              <div class=\"header\">\n                <div class=\"title\" translate>Float X offset</div>\n                <div class=\"description\" translate>Unit: px</div>\n              </div>\n              <input\n                class=\"me-3\"\n                type=\"range\"\n                [(ngModel)]=\"pluginConfig.backgroundFloatX\"\n                (mouseup)=\"apply()\"\n                min=\"-100\"\n                max=\"1000\"\n                step=\"1\"\n              />\n              <button\n                class=\"btn btn-outline-secondary me-3\"\n                (click)=\"pluginConfig.backgroundFloatX = 0; apply()\"\n              >\n                <i class=\"fas fa-solid fa-rotate-left\"> </i>\n              </button>\n              <input\n                class=\"form-control param-input\"\n                type=\"number\"\n                [(ngModel)]=\"pluginConfig.backgroundFloatX\"\n                (ngModelChange)=\"apply()\"\n              />\n            </div>\n            <div class=\"form-line\">\n              <div class=\"header\">\n                <div class=\"title\" translate>Float Y offset</div>\n                <div class=\"description\" translate>Unit: px</div>\n              </div>\n              <input\n                class=\"me-3\"\n                type=\"range\"\n                [(ngModel)]=\"pluginConfig.backgroundFloatY\"\n                (mouseup)=\"apply()\"\n                min=\"-100\"\n                max=\"1000\"\n                step=\"1\"\n              />\n              <button\n                class=\"btn btn-outline-secondary me-3\"\n                (click)=\"pluginConfig.backgroundFloatY = 0; apply()\"\n              >\n                <i class=\"fas fa-solid fa-rotate-left\"> </i>\n              </button>\n              <input\n                class=\"form-control param-input\"\n                type=\"number\"\n                [(ngModel)]=\"pluginConfig.backgroundFloatY\"\n                (ngModelChange)=\"apply()\"\n              />\n            </div>\n            <div class=\"form-line\">\n              <div class=\"header\">\n                <div class=\"title\" translate>Float X align</div>\n              </div>\n              <div class=\"btn-group\">\n                <input\n                  class=\"btn-check\"\n                  type=\"radio\"\n                  name=\"floatXAlign\"\n                  [(ngModel)]=\"pluginConfig.backgroundFloatXAlign\"\n                  (ngModelChange)=\"apply()\"\n                  id=\"floatXAlignLeft\"\n                  [value]=\"'left'\"\n                />\n                <label class=\"btn btn-secondary\" for=\"floatXAlignLeft\">\n                  <span translate>Left</span>\n                </label>\n                <input\n                  class=\"btn-check\"\n                  type=\"radio\"\n                  name=\"floatXAlign\"\n                  [(ngModel)]=\"pluginConfig.backgroundFloatXAlign\"\n                  (ngModelChange)=\"apply()\"\n                  id=\"floatXAlignCenter\"\n                  [value]=\"'center'\"\n                />\n                <label class=\"btn btn-secondary\" for=\"floatXAlignCenter\">\n                  <span translate>Center</span>\n                </label>\n                <input\n                  class=\"btn-check\"\n                  type=\"radio\"\n                  name=\"floatXAlign\"\n                  [(ngModel)]=\"pluginConfig.backgroundFloatXAlign\"\n                  (ngModelChange)=\"apply()\"\n                  id=\"floatXAlignRight\"\n                  [value]=\"'right'\"\n                />\n                <label class=\"btn btn-secondary\" for=\"floatXAlignRight\">\n                  <span translate>Right</span>\n                </label>\n              </div>\n            </div>\n            <div class=\"form-line\">\n              <div class=\"header\">\n                <div class=\"title\" translate>Float Y align</div>\n              </div>\n              <div class=\"btn-group\">\n                <input\n                  class=\"btn-check\"\n                  type=\"radio\"\n                  name=\"floatYAlign\"\n                  [(ngModel)]=\"pluginConfig.backgroundFloatYAlign\"\n                  (ngModelChange)=\"apply()\"\n                  id=\"floatYAlignTop\"\n                  [value]=\"'top'\"\n                />\n                <label class=\"btn btn-secondary\" for=\"floatYAlignTop\">\n                  <span translate>Top</span>\n                </label>\n                <input\n                  class=\"btn-check\"\n                  type=\"radio\"\n                  name=\"floatYAlign\"\n                  [(ngModel)]=\"pluginConfig.backgroundFloatYAlign\"\n                  (ngModelChange)=\"apply()\"\n                  id=\"floatYAlignCenter\"\n                  [value]=\"'center'\"\n                />\n                <label class=\"btn btn-secondary\" for=\"floatYAlignCenter\">\n                  <span translate>Center</span>\n                </label>\n                <input\n                  class=\"btn-check\"\n                  type=\"radio\"\n                  name=\"floatYAlign\"\n                  [(ngModel)]=\"pluginConfig.backgroundFloatYAlign\"\n                  (ngModelChange)=\"apply()\"\n                  id=\"floatYAlignBottom\"\n                  [value]=\"'bottom'\"\n                />\n                <label class=\"btn btn-secondary\" for=\"floatYAlignBottom\">\n                  <span translate>Bottom</span>\n                </label>\n              </div>\n            </div>\n            <div class=\"content-box\" *ngIf=\"pluginConfig.backgroundShowType === 'float'\">\n              <h4 translate>Drop Shadow Parameters</h4>\n              <div class=\"form-line\">\n                <div class=\"header\">\n                  <div class=\"title\" translate>Enable drop shadow</div>\n                  <div class=\"description\"></div>\n                </div>\n                <toggle\n                  [(ngModel)]=\"pluginConfig.backgroundDropShadowEnabled\"\n                  (ngModelChange)=\"apply()\"\n                >\n                </toggle>\n              </div>\n              <div class=\"content-box\" *ngIf=\"pluginConfig.backgroundDropShadowEnabled === true\">\n                <div class=\"form-line\">\n                  <div class=\"header\">\n                    <div class=\"title\" translate>Drop shadow X offset</div>\n                    <div class=\"description\" translate>Unit: px</div>\n                  </div>\n                  <input\n                    class=\"me-3\"\n                    type=\"range\"\n                    [(ngModel)]=\"pluginConfig.backgroundDropShadowX\"\n                    (mouseup)=\"apply()\"\n                    min=\"-200\"\n                    max=\"200\"\n                    step=\"1\"\n                  />\n                  <button\n                    class=\"btn btn-outline-secondary me-3\"\n                    (click)=\"pluginConfig.backgroundDropShadowX = 0; apply()\"\n                  >\n                    <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                  </button>\n                  <input\n                    class=\"form-control param-input\"\n                    type=\"number\"\n                    [(ngModel)]=\"pluginConfig.backgroundDropShadowX\"\n                    (ngModelChange)=\"apply()\"\n                  />\n                </div>\n                <div class=\"form-line\">\n                  <div class=\"header\">\n                    <div class=\"title\" translate>Drop shadow Y offset</div>\n                    <div class=\"description\" translate>Unit: px</div>\n                  </div>\n                  <input\n                    class=\"me-3\"\n                    type=\"range\"\n                    [(ngModel)]=\"pluginConfig.backgroundDropShadowY\"\n                    (mouseup)=\"apply()\"\n                    min=\"-200\"\n                    max=\"200\"\n                    step=\"1\"\n                  />\n                  <button\n                    class=\"btn btn-outline-secondary me-3\"\n                    (click)=\"pluginConfig.backgroundDropShadowY = 0; apply()\"\n                  >\n                    <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                  </button>\n                  <input\n                    class=\"form-control param-input\"\n                    type=\"number\"\n                    [(ngModel)]=\"pluginConfig.backgroundDropShadowY\"\n                    (ngModelChange)=\"apply()\"\n                  />\n                </div>\n                <div class=\"form-line\">\n                  <div class=\"header\">\n                    <div class=\"title\" translate>Drop shadow blur</div>\n                    <div class=\"description\" translate>Unit: px</div>\n                  </div>\n                  <input\n                    class=\"me-3\"\n                    type=\"range\"\n                    [(ngModel)]=\"pluginConfig.backgroundDropShadowBlur\"\n                    (mouseup)=\"apply()\"\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"0.1\"\n                  />\n                  <button\n                    class=\"btn btn-outline-secondary me-3\"\n                    (click)=\"pluginConfig.backgroundDropShadowBlur = 0; apply()\"\n                  >\n                    <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                  </button>\n                  <input\n                    class=\"form-control param-input\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"0.1\"\n                    [(ngModel)]=\"pluginConfig.backgroundDropShadowBlur\"\n                    (ngModelChange)=\"apply()\"\n                  />\n                </div>\n                <div class=\"form-line\">\n                  <div class=\"header\">\n                    <div class=\"title\" translate>Drop shadow color</div>\n                    <div class=\"description\" translate>\n                      Use RGBA (#FF0000A0) or color name(red, green, ...)\n                    </div>\n                  </div>\n                  <input\n                    class=\"form-control font-family-input\"\n                    type=\"text\"\n                    [(ngModel)]=\"pluginConfig.backgroundDropShadowColor\"\n                    (ngModelChange)=\"apply()\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"h4\" translate>Background Filters</div>\n          <ng-container *ngFor=\"let item of filters\">\n            <div class=\"form-line\">\n              <div class=\"header\">\n                <div class=\"title\" translate>{{ item.title }}</div>\n                <div class=\"description\" translate>{{ item.description }}</div>\n              </div>\n              <input\n                class=\"me-3\"\n                type=\"range\"\n                [(ngModel)]=\"pluginConfig[item.model]\"\n                (mouseup)=\"apply()\"\n                [min]=\"item.min\"\n                [max]=\"item.max\"\n                [step]=\"item.step\"\n              />\n              <button\n                class=\"btn btn-outline-secondary me-3\"\n                (click)=\"pluginConfig[item.model] = item.default; apply()\"\n              >\n                <i class=\"fas fa-solid fa-rotate-left\"> </i>\n              </button>\n              <input\n                class=\"form-control param-input\"\n                type=\"number\"\n                [(ngModel)]=\"pluginConfig[item.model]\"\n                (ngModelChange)=\"apply()\"\n                [min]=\"item.min\"\n                [max]=\"item.max\"\n                [step]=\"item.step\"\n              />\n            </div>\n          </ng-container>\n          <div class=\"h4\" translate>Extra Settings</div>\n          <ng-container *ngFor=\"let item of extraSettings\">\n            <div class=\"form-line\">\n              <div class=\"header\">\n                <div class=\"title\" translate>{{ item.title }}</div>\n                <div class=\"description\" translate>{{ item.description }}</div>\n              </div>\n              <input\n                class=\"me-3\"\n                type=\"range\"\n                [(ngModel)]=\"pluginConfig[item.model]\"\n                (mouseup)=\"apply()\"\n                [min]=\"item.min\"\n                [max]=\"item.max\"\n                [step]=\"item.step\"\n              />\n              <button\n                class=\"btn btn-outline-secondary me-3\"\n                (click)=\"pluginConfig[item.model] = item.default; apply()\"\n              >\n                <i class=\"fas fa-solid fa-rotate-left\"> </i>\n              </button>\n              <input\n                class=\"form-control param-input\"\n                type=\"number\"\n                [(ngModel)]=\"pluginConfig[item.model]\"\n                (ngModelChange)=\"apply()\"\n                [min]=\"item.min\"\n                [max]=\"item.max\"\n                [step]=\"item.step\"\n              />\n            </div>\n          </ng-container>\n        </div>\n        <div class=\"content-box\" *ngIf=\"pluginConfig.backgroundMode === 'advanced'\">\n          <div class=\"form-line\">\n            <div class=\"header\">\n              <div class=\"title\" translate>Background switch type</div>\n              <div class=\"description\" translate>When switch background</div>\n            </div>\n            <select\n              class=\"form-control\"\n              [(ngModel)]=\"pluginConfig.backgroundAdvancedSwitchType\"\n              (ngModelChange)=\"apply()\"\n            >\n              <option [ngValue]=\"'slideshow'\" translate>Slideshow</option>\n              <!-- <option [ngValue]=\"'session'\" translate>New Session</option> -->\n            </select>\n          </div>\n          <div class=\"form-line\" *ngIf=\"pluginConfig.backgroundAdvancedSwitchType === 'slideshow'\">\n            <div class=\"header\">\n              <div class=\"title\" translate>Slideshow interval</div>\n              <div class=\"description\" translate>Slideshow interval (second)</div>\n            </div>\n            <input\n              class=\"me-3\"\n              type=\"range\"\n              [(ngModel)]=\"pluginConfig.backgroundAdvancedSlideshowInterval\"\n              (mouseup)=\"apply()\"\n              [min]=\"5\"\n              [max]=\"604800\"\n              [step]=\"1\"\n            />\n            <button\n              class=\"btn btn-outline-secondary me-3\"\n              (click)=\"pluginConfig.backgroundAdvancedSlideshowInterval = 3600; apply()\"\n            >\n              <i class=\"fas fa-solid fa-rotate-left\"> </i>\n            </button>\n            <input\n              class=\"form-control param-input\"\n              type=\"number\"\n              [(ngModel)]=\"pluginConfig.backgroundAdvancedSlideshowInterval\"\n              (ngModelChange)=\"apply()\"\n              [min]=\"5\"\n              [max]=\"604800\"\n              [step]=\"1\"\n            />\n          </div>\n          <div class=\"form-line\">\n            <div class=\"header\">\n              <div class=\"title\" translate>Background choose type</div>\n              <div class=\"description\" translate>How to choose background</div>\n            </div>\n            <select\n              class=\"form-control\"\n              [(ngModel)]=\"pluginConfig.backgroundAdvancedChooseType\"\n              (ngModelChange)=\"apply()\"\n            >\n              <option [ngValue]=\"'sequence'\" translate>Sequence</option>\n              <option [ngValue]=\"'reverse'\" translate>Reverse</option>\n              <option [ngValue]=\"'random'\" translate>Random</option>\n            </select>\n          </div>\n\n          <div class=\"d-flex w-100\">\n            <button class=\"btn btn-primary\" (click)=\"addBackground()\">\n              <i class=\"fas fa-solid fa-plus\"></i>\n              <span translate>Add</span>\n            </button>\n            <div class=\"flex-grow-1\"></div>\n            <!-- <button class=\"btn btn-primary\" (click)=\"importBackgroundAdvancedSettings()\">\n              <i class=\"fas fa-solid fa-file-import\"></i>\n              <span translate>Import</span>\n            </button>\n            <button class=\"btn btn-primary ms-2\" (click)=\"exportBackgroundAdvancedSettings()\">\n              <i class=\"fas fa-solid fa-file-export\"></i>\n              <span translate>Export</span>\n            </button> -->\n          </div>\n          <div\n            class=\"list-group mt-3 mb-3\"\n            cdkDropList\n            (cdkDropListDropped)=\"dropBackgroundItem($event)\"\n          >\n            <div class=\"container list-group-item active align-items-center\">\n              <div class=\"row\">\n                <div class=\"col col-1 gx-1\">\n                  <button class=\"btn border-0\" disabled>\n                    <i class=\"fa-solid fa-toggle-on\"></i>\n                  </button>\n                </div>\n                <div class=\"col col-1 gx-1\">\n                  <button class=\"btn border-0\" disabled>\n                    <i class=\"fa-regular fa-folder-open\"></i>\n                  </button>\n                </div>\n                <div class=\"col col-2 gx-1 d-flex justify-content-center align-items-center\">\n                  <span class=\"text-center\" translate>Name</span>\n                </div>\n                <div class=\"col gx-1 d-flex justify-content-center align-items-center\">\n                  <span class=\"text-center\" translate>Background path</span>\n                </div>\n                <div class=\"col col-auto gx-1\">\n                  <button\n                    class=\"btn border border-dark\"\n                    style=\"width: 60px; --bs-border-opacity: 0\"\n                    disabled\n                  >\n                    <i class=\"fa-solid fa-palette\"></i>\n                  </button>\n                </div>\n                <div class=\"col col-auto gx-1\">\n                  <button class=\"btn border border-dark\" style=\"--bs-border-opacity: 0\" disabled>\n                    <i class=\"fa-solid fa-magnifying-glass\"></i>\n                  </button>\n                </div>\n                <div class=\"col col-auto gx-1\">\n                  <button class=\"btn border border-dark\" style=\"--bs-border-opacity: 0\" disabled>\n                    <i class=\"fa-solid fa-trash\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <ng-container *ngFor=\"let item of pluginConfig.backgrounds; let i = index\">\n              <div\n                class=\"container list-group-item align-items-center list-group-item-action list-group-item-background\"\n                cdkDrag\n              >\n                <div class=\"row\">\n                  <div class=\"col col-1 gx-1 d-flex justify-content-center align-items-center\">\n                    <toggle cdkDragHandle [(ngModel)]=\"item.enabled\" (ngModelChange)=\"apply()\">\n                    </toggle>\n                  </div>\n                  <div class=\"col col-1 gx-1 d-flex justify-content-center align-items-center\">\n                    <checkbox [(ngModel)]=\"item.isFolder\" (ngModelChange)=\"apply()\"> </checkbox>\n                  </div>\n                  <div class=\"col col-2 gx-1\">\n                    <input\n                      class=\"form-control\"\n                      style=\"background-color: rgba(0, 0, 0, 0.3); backdrop-filter: blur(3px)\"\n                      type=\"text\"\n                      [(ngModel)]=\"item.name\"\n                      (ngModelChange)=\"apply()\"\n                    />\n                  </div>\n                  <div class=\"col gx-1\">\n                    <div class=\"input-group\">\n                      <input\n                        class=\"form-control\"\n                        style=\"background-color: rgba(0, 0, 0, 0.3); backdrop-filter: blur(3px)\"\n                        type=\"text\"\n                        [(ngModel)]=\"item.backgroundPath\"\n                        (ngModelChange)=\"apply()\"\n                      />\n                      <button class=\"btn btn-secondary\" (click)=\"pickFile(item)\">\n                        <i class=\"fas fa-folder-open\"> </i>\n                      </button>\n                    </div>\n                  </div>\n                  <div class=\"col col-auto gx-1 d-flex justify-content-center align-items-center\">\n                    <div ngbDropdown container=\"body\" placement=\"top-right\">\n                      <button\n                        class=\"btn btn-outline-primary\"\n                        style=\"width: 60px\"\n                        ngbDropdownToggle\n                        (click)=\"$event.stopPropagation()\"\n                      >\n                        <i class=\"fa-solid fa-palette\"></i>\n                      </button>\n                      <div\n                        class=\"border border-black\"\n                        ngbDropdownMenu\n                        style=\"\n                          min-width: 450px;\n                          max-height: 300px;\n                          overflow: scroll;\n                          background-color: rgba(0, 0, 0, 0.3);\n                          backdrop-filter: blur(3px);\n                        \"\n                      >\n                        <div class=\"container-fluid\">\n                          <div class=\"form-line\">\n                            <div class=\"header\">\n                              <div class=\"title\" translate>Background show type</div>\n                            </div>\n                            <div class=\"btn-group\">\n                              <input\n                                class=\"btn-check\"\n                                type=\"radio\"\n                                name=\"backgroundShowType-{{ i }}\"\n                                [(ngModel)]=\"item.backgroundShowType\"\n                                (ngModelChange)=\"apply()\"\n                                id=\"showTypeFullscreen-{{ i }}\"\n                                [value]=\"'fullscreen'\"\n                              />\n                              <label class=\"btn btn-secondary\" for=\"showTypeFullscreen-{{ i }}\">\n                                <span translate>Fullscreen</span>\n                              </label>\n                              <input\n                                class=\"btn-check\"\n                                type=\"radio\"\n                                name=\"backgroundShowType-{{ i }}\"\n                                [(ngModel)]=\"item.backgroundShowType\"\n                                (ngModelChange)=\"apply()\"\n                                id=\"showTypeFullscreenFloat-{{ i }}\"\n                                [value]=\"'float'\"\n                              />\n                              <label\n                                class=\"btn btn-secondary\"\n                                for=\"showTypeFullscreenFloat-{{ i }}\"\n                              >\n                                <span translate>Float</span>\n                              </label>\n                            </div>\n                          </div>\n                          <div class=\"content-box\" *ngIf=\"item.backgroundShowType === 'fullscreen'\">\n                            <div class=\"form-line\">\n                              <div class=\"header\">\n                                <div class=\"title\" translate>Fullscreen type</div>\n                              </div>\n                              <div class=\"btn-group\">\n                                <input\n                                  class=\"btn-check\"\n                                  type=\"radio\"\n                                  name=\"backgroundFullscreenType-{{ i }}\"\n                                  [(ngModel)]=\"item.backgroundFullscreenType\"\n                                  (ngModelChange)=\"apply()\"\n                                  id=\"fullscreenTypeContain-{{ i }}\"\n                                  [value]=\"'contain'\"\n                                />\n                                <label\n                                  class=\"btn btn-secondary\"\n                                  for=\"fullscreenTypeContain-{{ i }}\"\n                                >\n                                  <span translate>Contain</span>\n                                </label>\n                                <input\n                                  class=\"btn-check\"\n                                  type=\"radio\"\n                                  name=\"backgroundFullscreenType-{{ i }}\"\n                                  [(ngModel)]=\"item.backgroundFullscreenType\"\n                                  (ngModelChange)=\"apply()\"\n                                  id=\"fullscreenTypeCover-{{ i }}\"\n                                  [value]=\"'cover'\"\n                                />\n                                <label class=\"btn btn-secondary\" for=\"fullscreenTypeCover-{{ i }}\">\n                                  <span translate>Cover</span>\n                                </label>\n                              </div>\n                            </div>\n                            <div\n                              class=\"form-line\"\n                              *ngIf=\"item.backgroundFullscreenType === 'contain'\"\n                            >\n                              <div class=\"header\">\n                                <div class=\"title\" translate>Repeat type</div>\n                              </div>\n                              <div class=\"btn-group\">\n                                <input\n                                  class=\"btn-check\"\n                                  type=\"radio\"\n                                  name=\"backgroundFullscreenRepeatType-{{ i }}\"\n                                  [(ngModel)]=\"item.backgroundFullscreenRepeatType\"\n                                  (ngModelChange)=\"apply()\"\n                                  id=\"fullscreenRepeatTypeRepeat-{{ i }}\"\n                                  [value]=\"'repeat'\"\n                                />\n                                <label\n                                  class=\"btn btn-secondary\"\n                                  for=\"fullscreenRepeatTypeRepeat-{{ i }}\"\n                                >\n                                  <span translate>Repeat</span>\n                                </label>\n                                <input\n                                  class=\"btn-check\"\n                                  type=\"radio\"\n                                  name=\"backgroundFullscreenRepeatType-{{ i }}\"\n                                  [(ngModel)]=\"item.backgroundFullscreenRepeatType\"\n                                  (ngModelChange)=\"apply()\"\n                                  id=\"fullscreenRepeatTypeNoRepeat-{{ i }}\"\n                                  [value]=\"'no-repeat'\"\n                                />\n                                <label\n                                  class=\"btn btn-secondary\"\n                                  for=\"fullscreenRepeatTypeNoRepeat-{{ i }}\"\n                                >\n                                  <span translate>No Repeat</span>\n                                </label>\n                              </div>\n                            </div>\n                          </div>\n                          <div class=\"content-box\" *ngIf=\"item.backgroundShowType === 'float'\">\n                            <h4 translate>Float Parameters</h4>\n                            <div class=\"form-line\">\n                              <div class=\"header\">\n                                <div class=\"title\" translate>Float size</div>\n                                <div class=\"description\" translate>Unit: px</div>\n                              </div>\n                              <input\n                                class=\"me-3\"\n                                type=\"range\"\n                                [(ngModel)]=\"item.backgroundFloatSize\"\n                                (mouseup)=\"apply()\"\n                                min=\"0\"\n                                max=\"1000\"\n                                step=\"1\"\n                              />\n                              <button\n                                class=\"btn btn-outline-secondary me-3\"\n                                (click)=\"item.backgroundFloatSize = 300; apply()\"\n                              >\n                                <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                              </button>\n                              <input\n                                class=\"form-control param-input\"\n                                type=\"number\"\n                                min=\"0\"\n                                [(ngModel)]=\"item.backgroundFloatSize\"\n                                (ngModelChange)=\"apply()\"\n                              />\n                            </div>\n                            <div class=\"form-line\">\n                              <div class=\"header\">\n                                <div class=\"title\" translate>Float X offset</div>\n                                <div class=\"description\" translate>Unit: px</div>\n                              </div>\n                              <input\n                                class=\"me-3\"\n                                type=\"range\"\n                                [(ngModel)]=\"item.backgroundFloatX\"\n                                (mouseup)=\"apply()\"\n                                min=\"-100\"\n                                max=\"1000\"\n                                step=\"1\"\n                              />\n                              <button\n                                class=\"btn btn-outline-secondary me-3\"\n                                (click)=\"item.backgroundFloatX = 0; apply()\"\n                              >\n                                <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                              </button>\n                              <input\n                                class=\"form-control param-input\"\n                                type=\"number\"\n                                [(ngModel)]=\"item.backgroundFloatX\"\n                                (ngModelChange)=\"apply()\"\n                              />\n                            </div>\n                            <div class=\"form-line\">\n                              <div class=\"header\">\n                                <div class=\"title\" translate>Float Y offset</div>\n                                <div class=\"description\" translate>Unit: px</div>\n                              </div>\n                              <input\n                                class=\"me-3\"\n                                type=\"range\"\n                                [(ngModel)]=\"item.backgroundFloatY\"\n                                (mouseup)=\"apply()\"\n                                min=\"-100\"\n                                max=\"1000\"\n                                step=\"1\"\n                              />\n                              <button\n                                class=\"btn btn-outline-secondary me-3\"\n                                (click)=\"item.backgroundFloatY = 0; apply()\"\n                              >\n                                <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                              </button>\n                              <input\n                                class=\"form-control param-input\"\n                                type=\"number\"\n                                [(ngModel)]=\"item.backgroundFloatY\"\n                                (ngModelChange)=\"apply()\"\n                              />\n                            </div>\n                            <div class=\"form-line\">\n                              <div class=\"header\">\n                                <div class=\"title\" translate>Float X align</div>\n                              </div>\n                              <div class=\"btn-group\">\n                                <input\n                                  class=\"btn-check\"\n                                  type=\"radio\"\n                                  name=\"floatXAlign-{{ i }}\"\n                                  [(ngModel)]=\"item.backgroundFloatXAlign\"\n                                  (ngModelChange)=\"apply()\"\n                                  id=\"floatXAlignLeft-{{ i }}\"\n                                  [value]=\"'left'\"\n                                />\n                                <label class=\"btn btn-secondary\" for=\"floatXAlignLeft-{{ i }}\">\n                                  <span translate>Left</span>\n                                </label>\n                                <input\n                                  class=\"btn-check\"\n                                  type=\"radio\"\n                                  name=\"floatXAlign-{{ i }}\"\n                                  [(ngModel)]=\"item.backgroundFloatXAlign\"\n                                  (ngModelChange)=\"apply()\"\n                                  id=\"floatXAlignCenter-{{ i }}\"\n                                  [value]=\"'center'\"\n                                />\n                                <label class=\"btn btn-secondary\" for=\"floatXAlignCenter-{{ i }}\">\n                                  <span translate>Center</span>\n                                </label>\n                                <input\n                                  class=\"btn-check\"\n                                  type=\"radio\"\n                                  name=\"floatXAlign-{{ i }}\"\n                                  [(ngModel)]=\"item.backgroundFloatXAlign\"\n                                  (ngModelChange)=\"apply()\"\n                                  id=\"floatXAlignRight-{{ i }}\"\n                                  [value]=\"'right'\"\n                                />\n                                <label class=\"btn btn-secondary\" for=\"floatXAlignRight-{{ i }}\">\n                                  <span translate>Right</span>\n                                </label>\n                              </div>\n                            </div>\n                            <div class=\"form-line\">\n                              <div class=\"header\">\n                                <div class=\"title\" translate>Float Y align</div>\n                              </div>\n                              <div class=\"btn-group\">\n                                <input\n                                  class=\"btn-check\"\n                                  type=\"radio\"\n                                  name=\"floatYAlign-{{ i }}\"\n                                  [(ngModel)]=\"item.backgroundFloatYAlign\"\n                                  (ngModelChange)=\"apply()\"\n                                  id=\"floatYAlignTop-{{ i }}\"\n                                  [value]=\"'top'\"\n                                />\n                                <label class=\"btn btn-secondary\" for=\"floatYAlignTop-{{ i }}\">\n                                  <span translate>Top</span>\n                                </label>\n                                <input\n                                  class=\"btn-check\"\n                                  type=\"radio\"\n                                  name=\"floatYAlign-{{ i }}\"\n                                  [(ngModel)]=\"item.backgroundFloatYAlign\"\n                                  (ngModelChange)=\"apply()\"\n                                  id=\"floatYAlignCenter-{{ i }}\"\n                                  [value]=\"'center'\"\n                                />\n                                <label class=\"btn btn-secondary\" for=\"floatYAlignCenter-{{ i }}\">\n                                  <span translate>Center</span>\n                                </label>\n                                <input\n                                  class=\"btn-check\"\n                                  type=\"radio\"\n                                  name=\"floatYAlign-{{ i }}\"\n                                  [(ngModel)]=\"item.backgroundFloatYAlign\"\n                                  (ngModelChange)=\"apply()\"\n                                  id=\"floatYAlignBottom-{{ i }}\"\n                                  [value]=\"'bottom'\"\n                                />\n                                <label class=\"btn btn-secondary\" for=\"floatYAlignBottom-{{ i }}\">\n                                  <span translate>Bottom</span>\n                                </label>\n                              </div>\n                            </div>\n                            <div class=\"content-box\" *ngIf=\"item.backgroundShowType === 'float'\">\n                              <h4 translate>Drop Shadow Parameters</h4>\n                              <div class=\"form-line\">\n                                <div class=\"header\">\n                                  <div class=\"title\" translate>Enable drop shadow</div>\n                                  <div class=\"description\"></div>\n                                </div>\n                                <toggle\n                                  [(ngModel)]=\"item.backgroundDropShadowEnabled\"\n                                  (ngModelChange)=\"apply()\"\n                                >\n                                </toggle>\n                              </div>\n                              <div\n                                class=\"content-box\"\n                                *ngIf=\"item.backgroundDropShadowEnabled === true\"\n                              >\n                                <div class=\"form-line\">\n                                  <div class=\"header\">\n                                    <div class=\"title\" translate>Drop shadow X offset</div>\n                                    <div class=\"description\" translate>Unit: px</div>\n                                  </div>\n                                  <input\n                                    class=\"me-3\"\n                                    type=\"range\"\n                                    [(ngModel)]=\"item.backgroundDropShadowX\"\n                                    (mouseup)=\"apply()\"\n                                    min=\"-200\"\n                                    max=\"200\"\n                                    step=\"1\"\n                                  />\n                                  <button\n                                    class=\"btn btn-outline-secondary me-3\"\n                                    (click)=\"item.backgroundDropShadowX = 0; apply()\"\n                                  >\n                                    <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                                  </button>\n                                  <input\n                                    class=\"form-control param-input\"\n                                    type=\"number\"\n                                    [(ngModel)]=\"item.backgroundDropShadowX\"\n                                    (ngModelChange)=\"apply()\"\n                                  />\n                                </div>\n                                <div class=\"form-line\">\n                                  <div class=\"header\">\n                                    <div class=\"title\" translate>Drop shadow Y offset</div>\n                                    <div class=\"description\" translate>Unit: px</div>\n                                  </div>\n                                  <input\n                                    class=\"me-3\"\n                                    type=\"range\"\n                                    [(ngModel)]=\"item.backgroundDropShadowY\"\n                                    (mouseup)=\"apply()\"\n                                    min=\"-200\"\n                                    max=\"200\"\n                                    step=\"1\"\n                                  />\n                                  <button\n                                    class=\"btn btn-outline-secondary me-3\"\n                                    (click)=\"item.backgroundDropShadowY = 0; apply()\"\n                                  >\n                                    <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                                  </button>\n                                  <input\n                                    class=\"form-control param-input\"\n                                    type=\"number\"\n                                    [(ngModel)]=\"item.backgroundDropShadowY\"\n                                    (ngModelChange)=\"apply()\"\n                                  />\n                                </div>\n                                <div class=\"form-line\">\n                                  <div class=\"header\">\n                                    <div class=\"title\" translate>Drop shadow blur</div>\n                                    <div class=\"description\" translate>Unit: px</div>\n                                  </div>\n                                  <input\n                                    class=\"me-3\"\n                                    type=\"range\"\n                                    [(ngModel)]=\"item.backgroundDropShadowBlur\"\n                                    (mouseup)=\"apply()\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    step=\"0.1\"\n                                  />\n                                  <button\n                                    class=\"btn btn-outline-secondary me-3\"\n                                    (click)=\"item.backgroundDropShadowBlur = 0; apply()\"\n                                  >\n                                    <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                                  </button>\n                                  <input\n                                    class=\"form-control param-input\"\n                                    type=\"number\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    step=\"0.1\"\n                                    [(ngModel)]=\"item.backgroundDropShadowBlur\"\n                                    (ngModelChange)=\"apply()\"\n                                  />\n                                </div>\n                                <div class=\"form-line\">\n                                  <div class=\"header\">\n                                    <div class=\"title\" translate>Drop shadow color</div>\n                                    <div class=\"description\" translate>\n                                      Use RGBA (#FF0000A0) or color name(red, green, ...)\n                                    </div>\n                                  </div>\n                                  <input\n                                    class=\"form-control\"\n                                    style=\"width: 120px\"\n                                    type=\"text\"\n                                    [(ngModel)]=\"item.backgroundDropShadowColor\"\n                                    (ngModelChange)=\"apply()\"\n                                  />\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div class=\"h4\" translate>Background Filters</div>\n                          <ng-container *ngFor=\"let filter of filters\">\n                            <div class=\"form-line\">\n                              <div class=\"header\">\n                                <div class=\"title\" translate>{{ filter.title }}</div>\n                                <div class=\"description\" translate>{{ filter.description }}</div>\n                              </div>\n                              <input\n                                class=\"me-3\"\n                                type=\"range\"\n                                [(ngModel)]=\"item[filter.model]\"\n                                (mouseup)=\"apply()\"\n                                [min]=\"filter.min\"\n                                [max]=\"filter.max\"\n                                [step]=\"filter.step\"\n                              />\n                              <button\n                                class=\"btn btn-outline-secondary me-3\"\n                                (click)=\"item[filter.model] = filter.default; apply()\"\n                              >\n                                <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                              </button>\n                              <input\n                                class=\"form-control param-input\"\n                                type=\"number\"\n                                [(ngModel)]=\"item[filter.model]\"\n                                (ngModelChange)=\"apply()\"\n                                [min]=\"filter.min\"\n                                [max]=\"filter.max\"\n                                [step]=\"filter.step\"\n                              />\n                            </div>\n                          </ng-container>\n                          <div class=\"h4\" translate>Extra Settings</div>\n                          <ng-container *ngFor=\"let extra of extraSettings\">\n                            <div class=\"form-line\">\n                              <div class=\"header\">\n                                <div class=\"title\" translate>{{ extra.title }}</div>\n                                <div class=\"description\" translate>{{ extra.description }}</div>\n                              </div>\n                              <input\n                                class=\"me-3\"\n                                type=\"range\"\n                                [(ngModel)]=\"item[extra.model]\"\n                                (mouseup)=\"apply()\"\n                                [min]=\"extra.min\"\n                                [max]=\"extra.max\"\n                                [step]=\"extra.step\"\n                              />\n                              <button\n                                class=\"btn btn-outline-secondary me-3\"\n                                (click)=\"item[extra.model] = extra.default; apply()\"\n                              >\n                                <i class=\"fas fa-solid fa-rotate-left\"> </i>\n                              </button>\n                              <input\n                                class=\"form-control param-input\"\n                                type=\"number\"\n                                [(ngModel)]=\"item[extra.model]\"\n                                (ngModelChange)=\"apply()\"\n                                [min]=\"extra.min\"\n                                [max]=\"extra.max\"\n                                [step]=\"extra.step\"\n                              />\n                            </div>\n                          </ng-container>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"col col-auto gx-1 d-flex justify-content-center align-items-center\">\n                    <button\n                      [disabled]=\"item.isFolder === true\"\n                      class=\"btn btn-outline-secondary\"\n                      (click)=\"previewBackground(i)\"\n                    >\n                      <i class=\"fa-solid fa-magnifying-glass\"></i>\n                    </button>\n                  </div>\n                  <div class=\"col col-auto gx-1 d-flex justify-content-center align-items-center\">\n                    <button class=\"btn btn-outline-secondary\" (click)=\"delBackground(i)\">\n                      <i class=\"fa-solid fa-trash\"></i>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </li>\n  <li ngbNavItem>\n    <a ngbNavLink translate>UI Font</a>\n    <ng-template ngbNavContent>\n      <div class=\"form-line\">\n        <div class=\"header\">\n          <div class=\"title\" translate>Enable UI font replace</div>\n          <div class=\"description\" translate>\n            Do not affect the terminal font in the [appearance] configuration\n          </div>\n        </div>\n        <toggle [(ngModel)]=\"pluginConfig.uiFontEnabled\" (ngModelChange)=\"apply()\"> </toggle>\n      </div>\n      <div class=\"content-box\" *ngIf=\"pluginConfig.uiFontEnabled === true\">\n        <div class=\"form-line\">\n          <div class=\"header\">\n            <div class=\"title\" translate>UI Font Family</div>\n          </div>\n          <div class=\"input-group w-75\">\n            <input\n              class=\"form-control font-family-input\"\n              type=\"text\"\n              [(ngModel)]=\"pluginConfig.uiFontFamily\"\n              (ngModelChange)=\"apply()\"\n            />\n            <input\n              class=\"form-control font-size-input\"\n              type=\"number\"\n              min=\"5\"\n              max=\"48\"\n              [(ngModel)]=\"pluginConfig.uiFontSize\"\n              (ngModelChange)=\"apply()\"\n            />\n          </div>\n        </div>\n        <div class=\"form-line\">\n          <div class=\"header\">\n            <div class=\"title\" translate>Fix close button font</div>\n            <div class=\"description\" translate>Restore the tab closing button to default font</div>\n          </div>\n          <toggle [(ngModel)]=\"pluginConfig.uiFontTabBarCloseBtnFix\" (ngModelChange)=\"apply()\">\n          </toggle>\n        </div>\n      </div>\n    </ng-template>\n  </li>\n  <li ngbNavItem>\n    <a ngbNavLink translate>Others</a>\n    <ng-template ngbNavContent>\n      <ng-container *ngFor=\"let item of others\">\n        <div class=\"form-line\">\n          <div class=\"header\">\n            <div class=\"title\" translate>{{ item.title }}</div>\n            <div class=\"description\" translate>{{ item.description }}</div>\n          </div>\n          <input\n            class=\"me-3\"\n            type=\"range\"\n            [(ngModel)]=\"pluginConfig[item.model]\"\n            (mouseup)=\"apply()\"\n            [min]=\"item.min\"\n            [max]=\"item.max\"\n            [step]=\"item.step\"\n          />\n          <button\n            class=\"btn btn-outline-secondary me-3\"\n            (click)=\"pluginConfig[item.model] = item.default; apply()\"\n          >\n            <i class=\"fas fa-solid fa-rotate-left\"> </i>\n          </button>\n          <input\n            class=\"form-control param-input\"\n            type=\"number\"\n            [(ngModel)]=\"pluginConfig[item.model]\"\n            (ngModelChange)=\"apply()\"\n            [min]=\"item.min\"\n            [max]=\"item.max\"\n            [step]=\"item.step\"\n          />\n        </div>\n      </ng-container>\n    </ng-template>\n  </li>\n</ul>\n<div [ngbNavOutlet]=\"nav\"></div>\n";
// Exports
module.exports = code;

/***/ }),

/***/ "./src/background.service.ts":
/*!***********************************!*\
  !*** ./src/background.service.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BackgroundService: () => (/* binding */ BackgroundService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "@angular/core");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tabby-core */ "tabby-core");
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tabby_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.provider */ "./src/config.provider.ts");
/* harmony import */ var _translations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./translations */ "./src/translations.ts");
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-node/nil.js");
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-node/v4.js");
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs */ "fs");
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_4__);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;






let BackgroundService = class BackgroundService {
    config;
    logService;
    translate;
    logger;
    styleElement;
    backgroundStyleElement;
    uiFontStyleElement;
    uiOtherStyleElement;
    pluginConfig;
    backgroundTimer;
    transitionTimer;
    previewMode;
    previewIndex;
    slideShowList;
    slideShowCurrentIndex;
    constructor(config, logService, translate) {
        this.config = config;
        this.logService = logService;
        this.translate = translate;
        this.logger = this.logService.create("tabby-background");
        this.logger.info("BackgroundService ctor");
        this.backgroundStyleElement = document.createElement("style");
        this.backgroundStyleElement.id = "background";
        this.backgroundStyleElement.innerHTML = "";
        document.body.appendChild(this.backgroundStyleElement);
        this.uiFontStyleElement = document.createElement("style");
        this.uiFontStyleElement.id = "uiFont";
        this.uiFontStyleElement.innerHTML = "";
        document.body.appendChild(this.uiFontStyleElement);
        this.uiOtherStyleElement = document.createElement("style");
        this.uiOtherStyleElement.id = "uiOther";
        this.uiOtherStyleElement.innerHTML = "";
        document.body.appendChild(this.uiOtherStyleElement);
        this.previewMode = false;
        this.slideShowList = [];
        this.config.ready$.subscribe(() => {
            this.logger.info("config ready");
            this.pluginConfig = this.config.store.backgroundPlugin;
            this.applyStyle();
            setImmediate(() => {
                for (const translation of _translations__WEBPACK_IMPORTED_MODULE_3__.translations) {
                    const [lang, trans] = translation;
                    this.translate.setTranslation(lang, trans, true);
                    this.logger.info("translate applied");
                }
            });
        });
    }
    clearStyle() {
        this.backgroundStyleElement.innerHTML = "";
        this.uiFontStyleElement.innerHTML = "";
        this.uiOtherStyleElement.innerHTML = "";
        this.leaveSlideShow();
    }
    applyStyle() {
        this.clearStyle();
        this.uiFontStyleElement.innerHTML = this.buildUiFontCss();
        this.uiOtherStyleElement.innerHTML = this.buildOthersCss();
        if (this.pluginConfig.backgroundEnabled === true) {
            if (this.pluginConfig.backgroundMode === "simple") {
                this.applyBackground(uuid__WEBPACK_IMPORTED_MODULE_5__["default"], false);
            }
            else if (this.pluginConfig.backgroundMode === "advanced") {
                if (this.previewMode) {
                    this.applyBackgroundPreview();
                    return;
                }
                if (this.pluginConfig.backgroundAdvancedSwitchType === "slideshow") {
                    this.enterSlideShow();
                }
            }
        }
        this.logger.info("Background applied.");
    }
    apply() {
        if (this.pluginConfig.backgroundAdvancedSlideshowInterval < 5) {
            this.pluginConfig.backgroundAdvancedSlideshowInterval = 5;
        }
        this.config.save();
        this.applyStyle();
    }
    applyBackground(id, updateTimestamp = true) {
        this.backgroundStyleElement.innerHTML = this.backgroundStyleElement.innerHTML.replace(/\/\*background-opacity-placeholder\*\/.*/, "/*background-opacity-placeholder*/opacity: 0;");
        setTimeout(() => {
            if (id === uuid__WEBPACK_IMPORTED_MODULE_5__["default"]) {
                const backgroundCss = this.buildBackgroundCss(this.pluginConfig);
                this.backgroundStyleElement.innerHTML = backgroundCss;
            }
            else {
                this.backgroundStyleElement.innerHTML = this.buildBackgroundCss(this.getBackgroundByID(id));
                this.pluginConfig.backgroundAdvancedCurrentId = id;
                if (updateTimestamp) {
                    this.pluginConfig.backgroundLastChangedTime = Date.now();
                }
            }
            setTimeout(() => {
                this.backgroundStyleElement.innerHTML = this.backgroundStyleElement.innerHTML.replace(/\/\*background-opacity-placeholder\*\/.*/, "/*background-opacity-placeholder*/opacity: 1;");
            }, 500);
            this.config.save();
        }, 500);
    }
    applyBackgroundPreview() {
        this.backgroundStyleElement.innerHTML = this.buildBackgroundCss(this.pluginConfig.backgrounds[this.previewIndex]).replace(/\/\*background-opacity-placeholder\*\/.*/, "/*background-opacity-placeholder*/opacity: 1;");
    }
    addBackground() {
        const newBackground = Object.assign({}, _config_provider__WEBPACK_IMPORTED_MODULE_2__.DefaultBackground);
        newBackground.id = uuid__WEBPACK_IMPORTED_MODULE_6__["default"]();
        newBackground.name = `bg${this.pluginConfig.backgrounds.length}`;
        this.pluginConfig.backgrounds.unshift(newBackground);
        this.logger.debug(`background ${newBackground.id} added...`);
        this.apply();
    }
    delBackground(i) {
        this.pluginConfig.backgrounds.splice(i, 1);
        this.apply();
    }
    getBackgroundByID(id) {
        const [advancedId, isFolder, fileName] = id.split("|");
        let realBackground;
        const background = this.pluginConfig.backgrounds.find((value) => value.id === advancedId);
        realBackground = Object.assign({}, background);
        if (isFolder === "true") {
            realBackground.backgroundPath += `/${fileName}`;
        }
        return realBackground;
    }
    buildSlideShowList() {
        this.slideShowList = [];
        const filteredList = this.pluginConfig.backgrounds.filter((value) => value.enabled);
        for (const item of filteredList) {
            const { id, isFolder = false } = item;
            const fileName = "null";
            let files = [];
            if (item.isFolder) {
                try {
                    files = (0,fs__WEBPACK_IMPORTED_MODULE_4__.readdirSync)(item.backgroundPath);
                }
                catch {
                    continue;
                }
                this.slideShowList.push(...files.map((value) => [id, isFolder, value].join("|")));
            }
            else {
                this.slideShowList.push([id, isFolder, fileName].join("|"));
            }
        }
        if (this.pluginConfig.backgroundAdvancedChooseType === "sequence") {
        }
        else if (this.pluginConfig.backgroundAdvancedChooseType === "reverse") {
            this.slideShowList.reverse();
        }
        else if (this.pluginConfig.backgroundAdvancedChooseType === "random") {
            this.slideShowList.sort(() => Math.random() - 0.5);
        }
        this.slideShowCurrentIndex = this.slideShowList.findIndex((value) => value === this.pluginConfig.backgroundAdvancedCurrentId);
        if (this.slideShowCurrentIndex === -1) {
            this.slideShowCurrentIndex = 0;
            this.pluginConfig.backgroundAdvancedCurrentId =
                this.slideShowList[this.slideShowCurrentIndex];
        }
    }
    enterSlideShow() {
        const handler = () => {
            console.debug(this.slideShowList);
            this.slideShowCurrentIndex++;
            if (this.slideShowCurrentIndex > this.slideShowList.length - 1) {
                this.slideShowCurrentIndex = 0;
            }
            this.applyBackground(this.slideShowList[this.slideShowCurrentIndex]);
            this.backgroundTimer = setTimeout(handler, this.pluginConfig.backgroundAdvancedSlideshowInterval * 1000);
        };
        this.leaveSlideShow();
        this.buildSlideShowList();
        if (this.slideShowList.length === 0) {
            return;
        }
        const leftTime = this.pluginConfig.backgroundAdvancedSlideshowInterval * 1000 -
            (Date.now() - this.pluginConfig.backgroundLastChangedTime);
        if (leftTime > 0) {
            this.logger.info(`${leftTime / 1000} second left to change background`);
            this.applyBackground(this.slideShowList[this.slideShowCurrentIndex], false);
            this.backgroundTimer = setTimeout(handler, leftTime);
        }
        else {
            handler();
        }
    }
    leaveSlideShow() {
        if (this.backgroundTimer) {
            clearTimeout(this.backgroundTimer);
            this.backgroundTimer = undefined;
        }
        if (this.transitionTimer) {
            clearTimeout(this.transitionTimer);
            this.transitionTimer = undefined;
        }
    }
    enterPreviewMode(i) {
        this.previewMode = true;
        this.previewIndex = i;
        this.applyStyle();
    }
    leavePreviewMode() {
        if (this.previewMode) {
            this.previewMode = false;
            this.applyStyle();
        }
    }
    buildBackgroundCss(background) {
        const { backgroundPath, backgroundShowType } = background;
        const { backgroundFullscreenType, backgroundFullscreenRepeatType } = background;
        const { backgroundFloatSize, backgroundFloatX, backgroundFloatY, backgroundFloatXAlign, backgroundFloatYAlign, } = background;
        const { backgroundOpacity, backgroundBlur, backgroundBrightness, backgroundContrast, backgroundGrayscale, backgroundHueRotate, backgroundInvert, backgroundSaturate, backgroundSepia, backgroundDropShadowEnabled, backgroundDropShadowX, backgroundDropShadowY, backgroundDropShadowBlur, backgroundDropShadowColor, } = background;
        const { backgroundListGroupTransparent, backgroundTerminalToolbarTransparent, backgroundFooterTransparent, } = background;
        const css = `
/* added by tabby-background plugin */
/* background */
.content-tab-active {
  background: none;
}
.content-tab-active::after {
  content: ""; position: fixed; left: 0; right: 0; z-index: -2; display: block; width: 100%; height: 100%;
  background: var(--body-bg);
}
start-page.content-tab-active::after {
  background: var(--theme-bg-more-2);
}
.content-tab-active::before {
  /*background-opacity-placeholder*/opacity: 0;
  content: ""; position: fixed; left: 0; right: 0; z-index: -1; display: block; width: 100%; height: 100%;
  filter:${(backgroundOpacity === 100 ? "" : ` opacity(${backgroundOpacity}%)`) +
            (backgroundBlur === 0 ? "" : ` blur(${backgroundBlur}px)`) +
            (backgroundBrightness === 100 ? "" : ` brightness(${backgroundBrightness}%)`) +
            (backgroundContrast === 100 ? "" : ` contrast(${backgroundContrast}%)`) +
            (backgroundGrayscale === 0 ? "" : ` grayscale(${backgroundGrayscale}%)`) +
            (backgroundHueRotate === 0 ? "" : ` hue-rotate(${backgroundHueRotate}deg)`) +
            (backgroundInvert === 0 ? "" : ` invert(${backgroundInvert}%)`) +
            (backgroundSaturate === 100 ? "" : ` saturate(${backgroundSaturate}%)`) +
            (backgroundSepia === 0 ? "" : ` sepia(${backgroundSepia}%)`) +
            (backgroundShowType === "float" && backgroundDropShadowEnabled
                ? ` drop-shadow(${backgroundDropShadowX}px ${backgroundDropShadowY}px ${backgroundDropShadowBlur}px ${backgroundDropShadowColor})`
                : "") +
            ";"}
  background-image: url("${encodeURI(backgroundPath.replaceAll("\\", "/"))}");
  transition: opacity 0.5s ease-in-out;
${(() => {
            if (backgroundShowType === "fullscreen") {
                return `
  background-repeat: ${backgroundFullscreenRepeatType};
  background-position: center;
  background-size: ${backgroundFullscreenType};`;
            }
            else if (backgroundShowType === "float") {
                return `
  background-repeat: no-repeat;
  background-position: 
  ${backgroundFloatXAlign === "center"
                    ? backgroundFloatXAlign
                    : `${backgroundFloatXAlign} ${backgroundFloatX}px`} 
  ${backgroundFloatYAlign === "center"
                    ? backgroundFloatYAlign
                    : `${backgroundFloatYAlign} ${backgroundFloatY}px`}; 
  background-size: ${backgroundFloatSize}px;`;
            }
            else {
                throw new Error("ShowType Error!");
            }
        })()}
}
/* group list */
${backgroundListGroupTransparent > 0
            ? `
.list-group {
  --bs-list-group-bg: color-mix(in srgb, var(--theme-bg-more) ${100 - backgroundListGroupTransparent}%, transparent);
}`.trim()
            : ""}
/* toolbar */
${backgroundTerminalToolbarTransparent > 0
            ? `
terminal-toolbar {
  background: color-mix(in srgb, var(--bs-body-bg) ${100 - backgroundTerminalToolbarTransparent}%, transparent) !important;
}`.trim()
            : ""}
/* footer */
${backgroundFooterTransparent !== 50
            ? `
footer {
  background: color-mix(in srgb, rgba(0,0,0,1) ${100 - backgroundFooterTransparent}%, transparent) !important;
}`.trim()
            : ""}`.trim();
        return css;
    }
    buildUiFontCss() {
        const { uiFontEnabled, uiFontFamily, uiFontSize, uiFontTabBarCloseBtnFix } = this.pluginConfig;
        if (!uiFontEnabled) {
            return "";
        }
        const uiFontCss = `
/* added by tabby-background plugin */
body {
  font-family: "${uiFontFamily}";
  font-size: ${uiFontSize}px;
}
${uiFontTabBarCloseBtnFix
            ? `
app-root>.content .tab-bar>.tabs tab-header button {
  /*left: 8px;*/
  font-family: "Source Sans Pro";
}`.trim()
            : ""}`.trim();
        return uiFontCss;
    }
    buildOthersCss() {
        const { othersInactiveTabDimming, othersActiveTabDimming, othersTabBarPersistentSpaceMinWidth, } = this.pluginConfig;
        const othersCss = `
/* added by tabby-background plugin */
/* tab dimming settings */
${othersInactiveTabDimming !== 50
            ? `
split-tab>.child {
  opacity: ${(100 - othersInactiveTabDimming) / 100};
}`.trim()
            : ""}
${othersActiveTabDimming !== 0
            ? `
split-tab>.child.focused {
  opacity: ${(100 - othersActiveTabDimming) / 100};
}`.trim()
            : ""}
/* tabbar settings */
${othersTabBarPersistentSpaceMinWidth !== 138
            ? `
.btn-space.persistent {
  min-width: ${othersTabBarPersistentSpaceMinWidth}px !important;
}
`.trim()
            : ""}`.trim();
        return othersCss;
    }
};
BackgroundService = __decorate([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)({ providedIn: "root" }),
    __metadata("design:paramtypes", [tabby_core__WEBPACK_IMPORTED_MODULE_1__.ConfigService,
        tabby_core__WEBPACK_IMPORTED_MODULE_1__.LogService, typeof (_a = typeof tabby_core__WEBPACK_IMPORTED_MODULE_1__.TranslateService !== "undefined" && tabby_core__WEBPACK_IMPORTED_MODULE_1__.TranslateService) === "function" ? _a : Object])
], BackgroundService);



/***/ }),

/***/ "./src/config.provider.ts":
/*!********************************!*\
  !*** ./src/config.provider.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BackgroundConfigProvider: () => (/* binding */ BackgroundConfigProvider),
/* harmony export */   DefaultBackground: () => (/* binding */ DefaultBackground)
/* harmony export */ });
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tabby-core */ "tabby-core");
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tabby_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-node/nil.js");


const DefaultBackground = {
    enabled: false,
    id: uuid__WEBPACK_IMPORTED_MODULE_1__["default"],
    name: "",
    isFolder: false,
    backgroundPath: "",
    backgroundShowType: "fullscreen",
    backgroundFullscreenType: "cover",
    backgroundFullscreenRepeatType: "no-repeat",
    backgroundFloatSize: 0,
    backgroundFloatX: 0,
    backgroundFloatY: 0,
    backgroundFloatXAlign: "center",
    backgroundFloatYAlign: "center",
    backgroundDropShadowEnabled: false,
    backgroundDropShadowX: 0,
    backgroundDropShadowY: 0,
    backgroundDropShadowBlur: 0,
    backgroundDropShadowColor: "black",
    backgroundOpacity: 100,
    backgroundBlur: 0,
    backgroundBrightness: 100,
    backgroundContrast: 100,
    backgroundGrayscale: 0,
    backgroundHueRotate: 0,
    backgroundInvert: 0,
    backgroundSaturate: 100,
    backgroundSepia: 0,
    backgroundListGroupTransparent: 0,
    backgroundTerminalToolbarTransparent: 0,
    backgroundFooterTransparent: 50,
};
class BackgroundConfigProvider extends tabby_core__WEBPACK_IMPORTED_MODULE_0__.ConfigProvider {
    defaults = {
        backgroundPlugin: {
            backgroundEnabled: false,
            backgroundPath: "../../../data/background.jpg",
            backgroundShowType: "fullscreen",
            backgroundFullscreenType: "cover",
            backgroundFullscreenRepeatType: "no-repeat",
            backgroundFloatSize: 300,
            backgroundFloatX: 0,
            backgroundFloatY: 0,
            backgroundFloatXAlign: "right",
            backgroundFloatYAlign: "bottom",
            backgroundDropShadowEnabled: false,
            backgroundDropShadowX: 0,
            backgroundDropShadowY: 0,
            backgroundDropShadowBlur: 10,
            backgroundDropShadowColor: "gray",
            backgroundOpacity: 45,
            backgroundBlur: 0,
            backgroundBrightness: 100,
            backgroundContrast: 100,
            backgroundGrayscale: 0,
            backgroundHueRotate: 0,
            backgroundInvert: 0,
            backgroundSaturate: 100,
            backgroundSepia: 0,
            backgroundListGroupTransparent: 0,
            backgroundTerminalToolbarTransparent: 0,
            backgroundFooterTransparent: 50,
            uiFontEnabled: false,
            uiFontFamily: "Source Sans Pro",
            uiFontSize: 14,
            uiFontTabBarCloseBtnFix: true,
            tabsOverrideEnabled: false,
            tabsFlexMinWidth: 200,
            tabsFixedWidth: 200,
            othersInactiveTabDimming: 50,
            othersActiveTabDimming: 0,
            othersTabBarPersistentSpaceMinWidth: 138,
            backgroundMode: "simple",
            backgrounds: [],
            backgroundAdvancedType: "global",
            backgroundAdvancedChooseType: "sequence",
            backgroundAdvancedSwitchType: "session",
            backgroundAdvancedSlideshowInterval: 3600,
            backgroundAdvancedCurrentId: uuid__WEBPACK_IMPORTED_MODULE_1__["default"],
            backgroundLastChangedTime: 0,
        },
    };
}


/***/ }),

/***/ "./src/settings-tab.component.ts":
/*!***************************************!*\
  !*** ./src/settings-tab.component.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BackgroundSettingsTabComponent: () => (/* binding */ BackgroundSettingsTabComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "@angular/core");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/drag-drop */ "@angular/cdk/drag-drop");
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _background_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./background.service */ "./src/background.service.ts");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ngx-toastr */ "ngx-toastr");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(ngx_toastr__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tabby-core */ "tabby-core");
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(tabby_core__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var tabby_electron__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tabby-electron */ "tabby-electron");
/* harmony import */ var tabby_electron__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(tabby_electron__WEBPACK_IMPORTED_MODULE_5__);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;






let BackgroundSettingsTabComponent = class BackgroundSettingsTabComponent {
    config;
    background;
    electron;
    hostWindow;
    toastr;
    translate;
    filters = [
        {
            title: "Background opacity",
            description: "Unit: %, 100 = disable",
            model: "backgroundOpacity",
            default: "100",
            min: "0",
            max: "100",
            step: "1",
        },
        {
            title: "Background blur",
            description: "Unit: px, 0 = disable",
            model: "backgroundBlur",
            default: "0",
            min: "0",
            max: "10",
            step: "0.1",
        },
        {
            title: "Background brightness",
            description: "Unit: %, 100 = disable",
            model: "backgroundBrightness",
            default: "100",
            min: "0",
            max: "200",
            step: "1",
        },
        {
            title: "Background contrast",
            description: "Unit: %, 100 = disable",
            model: "backgroundContrast",
            default: "100",
            min: "0",
            max: "500",
            step: "1",
        },
        {
            title: "Background grayscale",
            description: "Unit: %, 0 = disable",
            model: "backgroundGrayscale",
            default: "0",
            min: "0",
            max: "100",
            step: "1",
        },
        {
            title: "Background hue rotate",
            description: "Unit: degree, 0 = disable",
            model: "backgroundHueRotate",
            default: "0",
            min: "0",
            max: "360",
            step: "1",
        },
        {
            title: "Background invert",
            description: "Unit: %, 0 = disable",
            model: "backgroundInvert",
            default: "0",
            min: "0",
            max: "100",
            step: "1",
        },
        {
            title: "Background saturate",
            description: "Unit: %, 100 = disable",
            model: "backgroundSaturate",
            default: "100",
            min: "0",
            max: "1000",
            step: "1",
        },
        {
            title: "Background sepia",
            description: "Unit: %, 0 = disable",
            model: "backgroundSepia",
            default: "0",
            min: "0",
            max: "100",
            step: "1",
        },
    ];
    extraSettings = [
        {
            title: "Group list transparent",
            description: "Unit: %, 0 = disable, Apply to home menu and other group list",
            model: "backgroundListGroupTransparent",
            default: "0",
            min: "0",
            max: "100",
            step: "1",
        },
        {
            title: "Terminal toolbar transparent",
            description: "Unit: %, 0 = disable, Apply to terminal toolbar",
            model: "backgroundTerminalToolbarTransparent",
            default: "0",
            min: "0",
            max: "100",
            step: "1",
        },
        {
            title: "Home page footer transparent",
            description: "Unit: %, 50 = disable, Apply to home page footer",
            model: "backgroundFooterTransparent",
            default: "50",
            min: "0",
            max: "100",
            step: "1",
        },
    ];
    others = [
        {
            title: "Inactive split panel dimming",
            description: "Unit: %, 50 = default",
            model: "othersInactiveTabDimming",
            default: "50",
            min: "0",
            max: "100",
            step: "1",
        },
        {
            title: "Active split panel dimming",
            description: "Unit: %, 0 = default",
            model: "othersActiveTabDimming",
            default: "0",
            min: "0",
            max: "100",
            step: "1",
        },
        {
            title: "TabBar preserve space width",
            description: "Unit: px, 138 = disable",
            model: "othersTabBarPersistentSpaceMinWidth",
            default: "138",
            min: "0",
            max: "1000",
            step: "1",
        },
    ];
    pluginConfig;
    constructor(config, background, electron, hostWindow, toastr, translate) {
        this.config = config;
        this.background = background;
        this.electron = electron;
        this.hostWindow = hostWindow;
        this.toastr = toastr;
        this.translate = translate;
        this.pluginConfig = this.config.store.backgroundPlugin;
    }
    ngOnDestroy() {
        this.background.leavePreviewMode();
    }
    async pickFile(background) {
        const isFolder = background?.isFolder;
        const paths = this.electron.dialog.showOpenDialogSync(this.hostWindow.getWindow(), {
            filters: isFolder
                ? undefined
                : [
                    { name: "Images", extensions: ["jpg", "png", "gif"] },
                    { name: "All Files", extensions: ["*"] },
                ],
            properties: [isFolder ? "openDirectory" : "openFile", "showHiddenFiles"],
        });
        if (paths && paths[0]) {
            if (background) {
                background.backgroundPath = paths[0];
            }
            else {
                this.config.store.backgroundPlugin.backgroundPath = paths[0];
            }
            this.apply();
        }
    }
    apply() {
        this.background.apply();
    }
    dropBackgroundItem(event) {
        (0,_angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_1__.moveItemInArray)(this.pluginConfig.backgrounds, event.previousIndex, event.currentIndex);
        this.apply();
    }
    addBackground() {
        this.background.addBackground();
    }
    delBackground(i) {
        this.background.delBackground(i);
    }
    previewBackground(i) {
        this.background.enterPreviewMode(i);
    }
    exportBackgroundAdvancedSettings() { }
    importBackgroundAdvancedSettings() { }
};
BackgroundSettingsTabComponent = __decorate([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({
        template: __webpack_require__(/*! ./settings-tab.component.html */ "./src/settings-tab.component.html"),
        styles: [
            `
      .font-size-input {
        width: 100px;
        flex: none;
      }
      .param-input {
        width: 70px;
        flex: none;
      }

      .font-family-input {
        min-width: 150px;
        // flex: none;
      }

      .background-input {
        min-width: 300px;
        // flex: none;
      }
      .list-group-item-background {
        --bs-list-group-action-hover-bg: rgba(0, 0, 0, 0.55);
        // backdrop-filter: blur(3px);
      }
      .close {
        // font-size: 1.4rem;
        opacity: 0.1;
        transition: opacity 0.3s;
      }
      .nav-link:hover > .close {
        opacity: 0.8;
      }
      .add-button {
        opacity: 0.4;
      }
      .add-button:hover {
        opacity: 0.9;
      }
    `,
        ],
    }),
    __metadata("design:paramtypes", [tabby_core__WEBPACK_IMPORTED_MODULE_4__.ConfigService,
        _background_service__WEBPACK_IMPORTED_MODULE_2__.BackgroundService,
        tabby_electron__WEBPACK_IMPORTED_MODULE_5__.ElectronService,
        tabby_electron__WEBPACK_IMPORTED_MODULE_5__.ElectronHostWindow,
        ngx_toastr__WEBPACK_IMPORTED_MODULE_3__.ToastrService, typeof (_a = typeof tabby_core__WEBPACK_IMPORTED_MODULE_4__.TranslateService !== "undefined" && tabby_core__WEBPACK_IMPORTED_MODULE_4__.TranslateService) === "function" ? _a : Object])
], BackgroundSettingsTabComponent);



/***/ }),

/***/ "./src/settings-tab.provider.ts":
/*!**************************************!*\
  !*** ./src/settings-tab.provider.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BackgroundSettingsTabProvider: () => (/* binding */ BackgroundSettingsTabProvider)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "@angular/core");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tabby_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tabby-settings */ "tabby-settings");
/* harmony import */ var tabby_settings__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tabby_settings__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _settings_tab_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settings-tab.component */ "./src/settings-tab.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let BackgroundSettingsTabProvider = class BackgroundSettingsTabProvider extends tabby_settings__WEBPACK_IMPORTED_MODULE_1__.SettingsTabProvider {
    id = "tabby-background";
    icon = "image";
    title = "Background";
    constructor() {
        super();
    }
    getComponentType() {
        return _settings_tab_component__WEBPACK_IMPORTED_MODULE_2__.BackgroundSettingsTabComponent;
    }
};
BackgroundSettingsTabProvider = __decorate([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)(),
    __metadata("design:paramtypes", [])
], BackgroundSettingsTabProvider);



/***/ }),

/***/ "./src/translations.ts":
/*!*****************************!*\
  !*** ./src/translations.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   translations: () => (/* binding */ translations)
/* harmony export */ });
const translations = [
    [
        "zh-CN",
        {
            "Restore the tab closing button to default font": "将标签页关闭按钮恢复为默认字体",
            "Background blur": "背景模糊度",
            "Background brightness": "背景亮度",
            "Background contrast": "背景对比度",
            "Background Filters": "背景特效",
            "Background grayscale": "背景灰度",
            "Background hue rotate": "背景色相旋转",
            "Background image master switch": "背景图片总开关",
            "Background invert": "背景反转",
            "Background opacity": "背景不透明度",
            "Background path": "背景图片路径",
            "Background saturate": "背景饱和度",
            "Background sepia": "背景褐色",
            "Background show type": "背景显示类型",
            "Background": "背景",
            "Center": "中央",
            "Contain": "适应",
            "Cover": "填充",
            "Do not affect the terminal font in the [appearance] configuration": "不影响【外观】配置中的终端字体",
            "Drop shadow blur": "阴影模糊",
            "Drop shadow color": "阴影颜色",
            "Drop Shadow Parameters": "背景阴影参数",
            "Drop shadow X offset": "阴影X偏移",
            "Drop shadow Y offset": "阴影Y偏移",
            "Enable background": "是否启用背景图片",
            "Enable drop shadow": "启用背景阴影",
            "Enable tabs parameter override": "启用标签页参数覆盖",
            "Enable UI font replace": "是否启用界面字体替换",
            "Extra Settings": "额外设置",
            "Fix close button font": "修复标签页关闭按钮字体",
            "Float Parameters": "浮动参数",
            "Float size": "浮动大小",
            "Float X align": "浮动X对齐",
            "Float X offset": "浮动X偏移",
            "Float Y align": "浮动Y对齐",
            "Float Y offset": "浮动Y偏移",
            "Float": "浮动",
            "Fullscreen type": "全屏类型",
            "Fullscreen": "全屏",
            "Group list transparent": "分组列表透明度",
            "Home page footer transparent": "主页页脚透明度",
            "No Repeat": "不重复",
            "Relative path begins with ../../../data": "相对路径从../../../data开始",
            "Repeat type": "重复类型",
            "Repeat": "重复",
            "Tabs dynamic width min": "动态标签页宽度最小宽度",
            "Tabs fixed width": "固定标签页宽度",
            "Terminal toolbar transparent": "终端工具栏透明度",
            "UI Font Family": "界面字体",
            "UI Font": "字体",
            "Unit: %, 0 = disable, Apply to home menu and other group list": "单位：%，0 = 禁用，应用到首页菜单和其他分组列表",
            "Unit: %, 0 = disable, Apply to terminal toolbar": "单位：%，0 = 禁用，应用到终端工具栏",
            "Unit: %, 0 = disable": "单位：%，0 = 禁用",
            "Unit: %, 100 = disable": "单位：%，100 = 禁用",
            "Unit: %, 50 = disable, Apply to home page footer": "单位：%，50 = 禁用，应用到主页页脚",
            "Unit: degree, 0 = disable": "单位：度，0 = 禁用",
            "Unit: px, 0 = disable": "单位：像素，0 = 禁用",
            "Unit: px": "单位：像素",
            "Use RGBA (#FF0000A0) or color name(red, green, ...)": "使用RGBA（#FF0000A0）或者颜色名字（red, green, ...）",
            "Others": "其他",
            "Unit: %, 50 = default": "单位：%，50 = 默认",
            "Unit: %, 0 = default": "单位：%，0 = 默认",
            "Inactive split panel dimming": "非活动拆分页面变暗",
            "Active split panel dimming": "活动拆分页面变暗",
            "Background applied!": "背景已应用！",
            "TabBar preserve space width": "标签栏预留宽度",
            "Unit: px, 138 = disable": "单位：像素，138 = 禁用",
            "Background switch type": "背景切换类型",
            "When switch background": "什么时候切换背景",
            "Slideshow": "幻灯片",
            "Slideshow interval": "幻灯片间隔",
            "Slideshow interval (second)": "幻灯片间隔（秒）",
            "Background choose type": "背景选择方式",
            "How to choose background": "如何抽取背景",
            "Sequence": "顺序",
            "Random": "随机",
            "Reverse": "倒序",
            "Simple": "简单",
            "Background mode": "背景模式",
        },
    ],
];


/***/ }),

/***/ "./node_modules/uuid/dist/esm-node/native.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-node/native.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ "crypto");
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  randomUUID: (crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID)
});

/***/ }),

/***/ "./node_modules/uuid/dist/esm-node/nil.js":
/*!************************************************!*\
  !*** ./node_modules/uuid/dist/esm-node/nil.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');

/***/ }),

/***/ "./node_modules/uuid/dist/esm-node/regex.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-node/regex.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-node/rng.js":
/*!************************************************!*\
  !*** ./node_modules/uuid/dist/esm-node/rng.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rng)
/* harmony export */ });
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ "crypto");
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);
    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-node/stringify.js":
/*!******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-node/stringify.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-node/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-node/v4.js":
/*!***********************************************!*\
  !*** ./node_modules/uuid/dist/esm-node/v4.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ "./node_modules/uuid/dist/esm-node/native.js");
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-node/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-node/stringify.js");




function v4(options, buf, offset) {
  if (_native_js__WEBPACK_IMPORTED_MODULE_0__["default"].randomUUID && !buf && !options) {
    return _native_js__WEBPACK_IMPORTED_MODULE_0__["default"].randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-node/validate.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-node/validate.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/esm-node/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "@angular/cdk/drag-drop":
/*!*****************************************!*\
  !*** external "@angular/cdk/drag-drop" ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__angular_cdk_drag_drop__;

/***/ }),

/***/ "@angular/common":
/*!**********************************!*\
  !*** external "@angular/common" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__angular_common__;

/***/ }),

/***/ "@angular/core":
/*!********************************!*\
  !*** external "@angular/core" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__angular_core__;

/***/ }),

/***/ "@angular/forms":
/*!*********************************!*\
  !*** external "@angular/forms" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__angular_forms__;

/***/ }),

/***/ "@ng-bootstrap/ng-bootstrap":
/*!*********************************************!*\
  !*** external "@ng-bootstrap/ng-bootstrap" ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__ng_bootstrap_ng_bootstrap__;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_fs__;

/***/ }),

/***/ "ngx-toastr":
/*!*****************************!*\
  !*** external "ngx-toastr" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_ngx_toastr__;

/***/ }),

/***/ "tabby-core":
/*!*****************************!*\
  !*** external "tabby-core" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_tabby_core__;

/***/ }),

/***/ "tabby-electron":
/*!*********************************!*\
  !*** external "tabby-electron" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_tabby_electron__;

/***/ }),

/***/ "tabby-settings":
/*!*********************************!*\
  !*** external "tabby-settings" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_tabby_settings__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "@angular/common");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_common__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "@angular/core");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "@angular/forms");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_angular_forms__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ "@ng-bootstrap/ng-bootstrap");
/* harmony import */ var _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tabby-core */ "tabby-core");
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(tabby_core__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var tabby_settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tabby-settings */ "tabby-settings");
/* harmony import */ var tabby_settings__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(tabby_settings__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _background_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./background.service */ "./src/background.service.ts");
/* harmony import */ var _config_provider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./config.provider */ "./src/config.provider.ts");
/* harmony import */ var _settings_tab_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./settings-tab.component */ "./src/settings-tab.component.ts");
/* harmony import */ var _settings_tab_provider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./settings-tab.provider */ "./src/settings-tab.provider.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










let BackgroundModule = class BackgroundModule {
    config;
    background;
    constructor(config, background) {
        this.config = config;
        this.background = background;
    }
};
BackgroundModule = __decorate([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule)({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.FormsModule, (tabby_core__WEBPACK_IMPORTED_MODULE_4___default()), _ng_bootstrap_ng_bootstrap__WEBPACK_IMPORTED_MODULE_3__.NgbModule],
        providers: [
            { provide: tabby_core__WEBPACK_IMPORTED_MODULE_4__.ConfigProvider, useClass: _config_provider__WEBPACK_IMPORTED_MODULE_7__.BackgroundConfigProvider, multi: true },
            { provide: tabby_settings__WEBPACK_IMPORTED_MODULE_5__.SettingsTabProvider, useClass: _settings_tab_provider__WEBPACK_IMPORTED_MODULE_9__.BackgroundSettingsTabProvider, multi: true },
        ],
        entryComponents: [_settings_tab_component__WEBPACK_IMPORTED_MODULE_8__.BackgroundSettingsTabComponent],
        declarations: [_settings_tab_component__WEBPACK_IMPORTED_MODULE_8__.BackgroundSettingsTabComponent],
    }),
    __metadata("design:paramtypes", [tabby_core__WEBPACK_IMPORTED_MODULE_4__.ConfigService, _background_service__WEBPACK_IMPORTED_MODULE_6__.BackgroundService])
], BackgroundModule);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BackgroundModule);

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=index.js.map