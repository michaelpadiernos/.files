(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@angular/core"), require("@angular/common"), require("@angular/forms"), require("tabby-core"), require("tabby-settings"), require("tabby-terminal"), (function webpackLoadOptionalExternalModule() { try { return require("fs"); } catch(e) {} }()), require("rxjs"));
	else if(typeof define === 'function' && define.amd)
		define(["@angular/core", "@angular/common", "@angular/forms", "tabby-core", "tabby-settings", "tabby-terminal", "fs", "rxjs"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("@angular/core"), require("@angular/common"), require("@angular/forms"), require("tabby-core"), require("tabby-settings"), require("tabby-terminal"), (function webpackLoadOptionalExternalModule() { try { return require("fs"); } catch(e) {} }()), require("rxjs")) : factory(root["@angular/core"], root["@angular/common"], root["@angular/forms"], root["tabby-core"], root["tabby-settings"], root["tabby-terminal"], root["fs"], root["rxjs"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(global, (__WEBPACK_EXTERNAL_MODULE__angular_core__, __WEBPACK_EXTERNAL_MODULE__angular_common__, __WEBPACK_EXTERNAL_MODULE__angular_forms__, __WEBPACK_EXTERNAL_MODULE_tabby_core__, __WEBPACK_EXTERNAL_MODULE_tabby_settings__, __WEBPACK_EXTERNAL_MODULE_tabby_terminal__, __WEBPACK_EXTERNAL_MODULE_fs__, __WEBPACK_EXTERNAL_MODULE_rxjs__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/settingsTab.component.pug":
/*!***************************************!*\
  !*** ./src/settingsTab.component.pug ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var req = __webpack_require__(/*! !!./node_modules/pug-loader/index.js!./src/settingsTab.component.pug */ "./node_modules/pug-loader/index.js!./src/settingsTab.component.pug");
module.exports = (req['default'] || req).apply(req, [])

/***/ }),

/***/ "./node_modules/pug-loader/index.js!./src/settingsTab.component.pug":
/*!**************************************************************************!*\
  !*** ./node_modules/pug-loader/index.js!./src/settingsTab.component.pug ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(/*! !../node_modules/pug-runtime/index.js */ "./node_modules/pug-runtime/index.js");

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Ch3\u003ESerial Timestamp\u003C\u002Fh3\u003E\u003Cdiv class=\"form-line\"\u003E\u003Cdiv class=\"header\"\u003E\u003Cdiv class=\"title\"\u003ETimestamp format\u003C\u002Fdiv\u003E\u003Cdiv class=\"description\"\u003ESelect timestamp format\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cselect class=\"form-control\" [(ngModel)]=\"config.store.serialTimestampPlugin.timestamp\" (ngModelChange)=\"config.save()\"\u003E\u003Coption [ngValue]=\"timestamp\" *ngFor=\"let timestamp of timestamps\"\u003E{{timestamp}}\u003C\u002Foption\u003E\u003C\u002Fselect\u003E\u003C\u002Fdiv\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ "./node_modules/pug-runtime/index.js":
/*!*******************************************!*\
  !*** ./node_modules/pug-runtime/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var pug_has_own_property = Object.prototype.hasOwnProperty;

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = pug_merge;
function pug_merge(a, b) {
  if (arguments.length === 1) {
    var attrs = a[0];
    for (var i = 1; i < a.length; i++) {
      attrs = pug_merge(attrs, a[i]);
    }
    return attrs;
  }

  for (var key in b) {
    if (key === 'class') {
      var valA = a[key] || [];
      a[key] = (Array.isArray(valA) ? valA : [valA]).concat(b[key] || []);
    } else if (key === 'style') {
      var valA = pug_style(a[key]);
      valA = valA && valA[valA.length - 1] !== ';' ? valA + ';' : valA;
      var valB = pug_style(b[key]);
      valB = valB && valB[valB.length - 1] !== ';' ? valB + ';' : valB;
      a[key] = valA + valB;
    } else {
      a[key] = b[key];
    }
  }

  return a;
}

/**
 * Process array, object, or string as a string of classes delimited by a space.
 *
 * If `val` is an array, all members of it and its subarrays are counted as
 * classes. If `escaping` is an array, then whether or not the item in `val` is
 * escaped depends on the corresponding item in `escaping`. If `escaping` is
 * not an array, no escaping is done.
 *
 * If `val` is an object, all the keys whose value is truthy are counted as
 * classes. No escaping is done.
 *
 * If `val` is a string, it is counted as a class. No escaping is done.
 *
 * @param {(Array.<string>|Object.<string, boolean>|string)} val
 * @param {?Array.<string>} escaping
 * @return {String}
 */
exports.classes = pug_classes;
function pug_classes_array(val, escaping) {
  var classString = '',
    className,
    padding = '',
    escapeEnabled = Array.isArray(escaping);
  for (var i = 0; i < val.length; i++) {
    className = pug_classes(val[i]);
    if (!className) continue;
    escapeEnabled && escaping[i] && (className = pug_escape(className));
    classString = classString + padding + className;
    padding = ' ';
  }
  return classString;
}
function pug_classes_object(val) {
  var classString = '',
    padding = '';
  for (var key in val) {
    if (key && val[key] && pug_has_own_property.call(val, key)) {
      classString = classString + padding + key;
      padding = ' ';
    }
  }
  return classString;
}
function pug_classes(val, escaping) {
  if (Array.isArray(val)) {
    return pug_classes_array(val, escaping);
  } else if (val && typeof val === 'object') {
    return pug_classes_object(val);
  } else {
    return val || '';
  }
}

/**
 * Convert object or string to a string of CSS styles delimited by a semicolon.
 *
 * @param {(Object.<string, string>|string)} val
 * @return {String}
 */

exports.style = pug_style;
function pug_style(val) {
  if (!val) return '';
  if (typeof val === 'object') {
    var out = '';
    for (var style in val) {
      /* istanbul ignore else */
      if (pug_has_own_property.call(val, style)) {
        out = out + style + ':' + val[style] + ';';
      }
    }
    return out;
  } else {
    return val + '';
  }
}

/**
 * Render the given attribute.
 *
 * @param {String} key
 * @param {String} val
 * @param {Boolean} escaped
 * @param {Boolean} terse
 * @return {String}
 */
exports.attr = pug_attr;
function pug_attr(key, val, escaped, terse) {
  if (
    val === false ||
    val == null ||
    (!val && (key === 'class' || key === 'style'))
  ) {
    return '';
  }
  if (val === true) {
    return ' ' + (terse ? key : key + '="' + key + '"');
  }
  var type = typeof val;
  if (
    (type === 'object' || type === 'function') &&
    typeof val.toJSON === 'function'
  ) {
    val = val.toJSON();
  }
  if (typeof val !== 'string') {
    val = JSON.stringify(val);
    if (!escaped && val.indexOf('"') !== -1) {
      return ' ' + key + "='" + val.replace(/'/g, '&#39;') + "'";
    }
  }
  if (escaped) val = pug_escape(val);
  return ' ' + key + '="' + val + '"';
}

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} terse whether to use HTML5 terse boolean attributes
 * @return {String}
 */
exports.attrs = pug_attrs;
function pug_attrs(obj, terse) {
  var attrs = '';

  for (var key in obj) {
    if (pug_has_own_property.call(obj, key)) {
      var val = obj[key];

      if ('class' === key) {
        val = pug_classes(val);
        attrs = pug_attr(key, val, false, terse) + attrs;
        continue;
      }
      if ('style' === key) {
        val = pug_style(val);
      }
      attrs += pug_attr(key, val, false, terse);
    }
  }

  return attrs;
}

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

var pug_match_html = /["&<>]/;
exports.escape = pug_escape;
function pug_escape(_html) {
  var html = '' + _html;
  var regexResult = pug_match_html.exec(html);
  if (!regexResult) return _html;

  var result = '';
  var i, lastIndex, escape;
  for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {
    switch (html.charCodeAt(i)) {
      case 34:
        escape = '&quot;';
        break;
      case 38:
        escape = '&amp;';
        break;
      case 60:
        escape = '&lt;';
        break;
      case 62:
        escape = '&gt;';
        break;
      default:
        continue;
    }
    if (lastIndex !== i) result += html.substring(lastIndex, i);
    lastIndex = i + 1;
    result += escape;
  }
  if (lastIndex !== i) return result + html.substring(lastIndex, i);
  else return result;
}

/**
 * Re-throw the given `err` in context to the
 * the pug in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @param {String} str original source
 * @api private
 */

exports.rethrow = pug_rethrow;
function pug_rethrow(err, filename, lineno, str) {
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  var context, lines, start, end;
  try {
    str = str || (__webpack_require__(/*! fs */ "fs").readFileSync)(filename, {encoding: 'utf8'});
    context = 3;
    lines = str.split('\n');
    start = Math.max(lineno - context, 0);
    end = Math.min(lines.length, lineno + context);
  } catch (ex) {
    err.message +=
      ' - could not read from ' + filename + ' (' + ex.message + ')';
    pug_rethrow(err, null, lineno);
    return;
  }

  // Error context
  context = lines
    .slice(start, end)
    .map(function(line, i) {
      var curr = i + start + 1;
      return (curr == lineno ? '  > ' : '    ') + curr + '| ' + line;
    })
    .join('\n');

  // Alter exception message
  err.path = filename;
  try {
    err.message =
      (filename || 'Pug') +
      ':' +
      lineno +
      '\n' +
      context +
      '\n\n' +
      err.message;
  } catch (e) {}
  throw err;
}


/***/ }),

/***/ "./src/configProvider.ts":
/*!*******************************!*\
  !*** ./src/configProvider.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SerialTimestampConfigProvider": () => (/* binding */ SerialTimestampConfigProvider)
/* harmony export */ });
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tabby-core */ "tabby-core");
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tabby_core__WEBPACK_IMPORTED_MODULE_0__);

/** @hidden */
class SerialTimestampConfigProvider extends tabby_core__WEBPACK_IMPORTED_MODULE_0__.ConfigProvider {
    constructor() {
        super(...arguments);
        this.defaults = {
            serialTimestampPlugin: {
                timestamp: 'None',
            }
        };
    }
}


/***/ }),

/***/ "./src/sessionMiddleware.ts":
/*!**********************************!*\
  !*** ./src/sessionMiddleware.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SerialTimestampMiddleware": () => (/* binding */ SerialTimestampMiddleware)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "rxjs");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tabby_terminal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tabby-terminal */ "tabby-terminal");
/* harmony import */ var tabby_terminal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tabby_terminal__WEBPACK_IMPORTED_MODULE_1__);
// import { Injectable } from '@angular/core'


// [dd/mm/yyyy hh:mm:ss:zzz]
// const DateOverhead = 26
const None = 'None';
const ISO = 'ISO 8601';
const Europe = 'dd/mm/yyyy hh:mm:ss.SSS';
const US = 'mm/dd/yyyy hh:mm:ss.SSS';
// @Injectable()
class SerialTimestampMiddleware extends tabby_terminal__WEBPACK_IMPORTED_MODULE_1__.SessionMiddleware {
    constructor(config, parentLogger) {
        super();
        this.config = config;
        this.startOfLine = true;
        this.formatChanged = false;
        this.currentTimestampFormat = this.config.store.serialTimestampPlugin.timestamp;
        this.config.changed$.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__.map)(() => this.config.store.serialTimestampPlugin.timestamp), (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.distinctUntilChanged)()).subscribe(() => this.updateTimestampFormat());
        this.logger = parentLogger;
        // this.logger.info(`Middleware created`)
    }
    feedFromSession(data) {
        let currentDate;
        let newData;
        let occurences;
        let line;
        let strRemaining;
        // let str: String
        // this.logger.info(`-------------------------- Entering feedFromSession --------------------------`)
        // this.logger.info(`data hex: ${data.toString('hex')}`)
        // this.logger.info(`data utf8: ${data.toString('utf8')}`)
        // str = 'Provided data '
        // data.forEach((char) => {
        //     str = str + '0x' + char.toString(16) + ' '
        // })
        // this.logger.info(`Provided string ${data.toString('utf8')}`)
        // this.logger.info(`${str}`)
        currentDate = this.getDate();
        if (currentDate !== "") {
            // split always return an empty string if it did not found the required string/char
            // occurences is set to 1 when LF was not found to force the for loop once
            occurences = data.toString('utf8').split('\n').length > 1 ? data.toString('utf8').split('\n').length - 1 : data.toString('utf8').split('\n').length;
            strRemaining = data.toString('utf8');
            // this.logger.info(`occurences ${occurences}`)
            // this.logger.info(`data.toString('utf8').split(CRLF OR LF).length ${data.toString('utf8').split(/\r\n|\n/).length}`)
            // this.logger.info(`data.toString('utf8').length ${data.toString('utf8').length}`)
            for (let i = 0; i < occurences; i++) {
                // this.logger.info(`Loop number ${i}`)
                // Original line for CR|LF: /\r|\n/.exec()
                if (/\n/.exec(strRemaining.toString())) {
                    // this.logger.info(`Remaining data contains LF`)
                    line = strRemaining.substring(0, strRemaining.indexOf("\n") + 1);
                    strRemaining = strRemaining.substring(strRemaining.indexOf("\n") + 1);
                }
                else {
                    // this.logger.info(`Remaining data does not contain LF`)
                    line = strRemaining;
                    strRemaining = null;
                }
                // this.logger.info(`line ${line}`)
                // str = 'line data '
                // Buffer.from(line, 'utf8').forEach((char) => {
                //     str = str + '0x' + char.toString(16) + ' '
                // })
                // this.logger.info(`${str}`)
                // if(strRemaining) {
                //     this.logger.info(`strRemaining ${strRemaining}`)
                //     str = 'strRemaining data '
                //     Buffer.from(strRemaining, 'utf8').forEach((char) => {
                //         str = str + '0x' + char.toString(16) + ' '
                //     })
                //     this.logger.info(`${str}`)
                // }
                if (this.startOfLine === true || this.formatChanged === true) {
                    // this.logger.info(`line is the beginning of the line thus prepend the date`)
                    newData = Buffer.concat([Buffer.from("["), Buffer.from(currentDate), Buffer.from("] "), Buffer.from(line)]);
                    this.outputToTerminal.next(newData);
                    if (this.startOfLine === true) {
                        // this.logger.info(`Unsetting startOfLine`)
                        this.startOfLine = false;
                    }
                    if (this.formatChanged === true) {
                        // this.logger.info(`Unsetting formatChanged`)
                        this.formatChanged = false;
                    }
                }
                else {
                    // this.logger.info(`line is not the beginning of the line. Do not  prepend the date`)
                    this.outputToTerminal.next(Buffer.from(line));
                }
                // If line contains \n or if it ends with \r
                if (/\n/.exec(line.toString()) || line.charAt(line.length - 1) === '\r') {
                    // this.logger.info(`line contains LF thus setting startOfLine`)
                    this.startOfLine = true;
                }
                // Last string does not contains \n, thus, must be output because for loop will not
                // reach it
                if (strRemaining && strRemaining.length > 0 && /\n/.exec(strRemaining.toString()) === null) {
                    // this.logger.info(`Last string does not contains LF`)
                    newData = Buffer.concat([Buffer.from("["), Buffer.from(currentDate), Buffer.from("] "), Buffer.from(strRemaining)]);
                    this.outputToTerminal.next(newData);
                    if (strRemaining.charAt(strRemaining.length - 1) === '\r') {
                        this.startOfLine = true;
                    }
                    else {
                        this.startOfLine = false;
                    }
                }
            }
        }
        else { // Timestamp format is "None"
            this.outputToTerminal.next(data);
        }
        // this.logger.info(`-------------------------- Leaving feedFromSession --------------------------`)
    }
    close() {
        // this.logger.info(`Middleware closing`)
        super.close();
    }
    updateTimestampFormat() {
        this.currentTimestampFormat = this.config.store.serialTimestampPlugin.timestamp;
        this.formatChanged = true; // set to true to make sur the date is added before the new data
        this.logger.info(`Serial timestamp changed to ${this.currentTimestampFormat}`);
    }
    getDate() {
        let sDate = new String("");
        let date;
        switch (this.currentTimestampFormat) {
            case None:
                sDate = "";
                break;
            case ISO:
                date = new Date();
                sDate = date.toISOString();
                break;
            case Europe:
                date = new Date();
                sDate = sDate.concat(date.getDate().toString(10).padStart(2, "0"), "/", (date.getMonth() + 1).toString(10).padStart(2, "0"), "/", date.getFullYear().toString(10), " ", date.getHours().toString(10).padStart(2, "0"), ":", date.getMinutes().toString(10).padStart(2, "0"), ":", date.getSeconds().toString(10).padStart(2, "0"), ".", date.getMilliseconds().toString(10).padStart(3, "0"));
                // this.logger.info(`Date created ${sDate}`)
                break;
            case US:
                date = new Date();
                sDate = sDate.concat((date.getMonth() + 1).toString(10).padStart(2, "0"), "/", date.getDate().toString(10).padStart(2, "0"), "/", date.getFullYear().toString(10), " ", date.getHours().toString(10).padStart(2, "0"), ":", date.getMinutes().toString(10).padStart(2, "0"), ":", date.getSeconds().toString(10).padStart(2, "0"), ".", date.getMilliseconds().toString(10).padStart(3, "0"));
                break;
            default:
                this.logger.error(`Unknown format ${this.currentTimestampFormat}`);
                sDate = "";
        }
        return sDate;
    }
}


/***/ }),

/***/ "./src/settingsTab.component.ts":
/*!**************************************!*\
  !*** ./src/settingsTab.component.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SerialTimestampSettingsTabComponent": () => (/* binding */ SerialTimestampSettingsTabComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "@angular/core");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tabby-core */ "tabby-core");
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tabby_core__WEBPACK_IMPORTED_MODULE_1__);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/** @hidden */
let SerialTimestampSettingsTabComponent = class SerialTimestampSettingsTabComponent {
    constructor(config) {
        this.config = config;
        this.timestamps = [
            'None',
            'dd/mm/yyyy hh:mm:ss.SSS',
            'mm/dd/yyyy hh:mm:ss.SSS',
            'ISO 8601',
        ];
    }
};
SerialTimestampSettingsTabComponent = __decorate([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({
        template: __webpack_require__(/*! ./settingsTab.component.pug */ "./src/settingsTab.component.pug"),
    }),
    __metadata("design:paramtypes", [tabby_core__WEBPACK_IMPORTED_MODULE_1__.ConfigService])
], SerialTimestampSettingsTabComponent);



/***/ }),

/***/ "./src/settingsTabProvider.ts":
/*!************************************!*\
  !*** ./src/settingsTabProvider.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SerialTimestampSettingsTabProvider": () => (/* binding */ SerialTimestampSettingsTabProvider)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "@angular/core");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tabby_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tabby-settings */ "tabby-settings");
/* harmony import */ var tabby_settings__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tabby_settings__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _settingsTab_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settingsTab.component */ "./src/settingsTab.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



/** @hidden */
let SerialTimestampSettingsTabProvider = class SerialTimestampSettingsTabProvider extends tabby_settings__WEBPACK_IMPORTED_MODULE_1__.SettingsTabProvider {
    constructor() {
        super(...arguments);
        this.id = 'timestamp';
        this.icon = 'clock'; // defined in tabby-core/src/icons.json
        this.title = 'Serial Timestamp';
    }
    getComponentType() {
        return _settingsTab_component__WEBPACK_IMPORTED_MODULE_2__.SerialTimestampSettingsTabComponent;
    }
};
SerialTimestampSettingsTabProvider = __decorate([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)()
], SerialTimestampSettingsTabProvider);



/***/ }),

/***/ "./src/terminalDecorator.ts":
/*!**********************************!*\
  !*** ./src/terminalDecorator.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SerialTimestampDecorator": () => (/* binding */ SerialTimestampDecorator)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "@angular/core");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tabby_terminal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tabby-terminal */ "tabby-terminal");
/* harmony import */ var tabby_terminal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tabby_terminal__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tabby-core */ "tabby-core");
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(tabby_core__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _sessionMiddleware__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sessionMiddleware */ "./src/sessionMiddleware.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

// import { bufferTime } from 'rxjs'



let SerialTimestampDecorator = class SerialTimestampDecorator extends tabby_terminal__WEBPACK_IMPORTED_MODULE_1__.TerminalDecorator {
    constructor(configService, log) {
        super();
        this.logger = log.create('serial-timestamp');
        this.config = configService;
    }
    attach(terminal) {
        // Will be done this way once a new version of the tabby* plugins is released
        // if(terminal.profile instanceof SerialTabComponent) {
        // }
        if (terminal.constructor.name === 'SerialTabComponent') {
            // this.logger.info(`Terminal is of type SerialTabComponent`)
            terminal.sessionChanged$.subscribe(session => {
                if (session) {
                    this.attachToSession(terminal);
                }
            });
            if (terminal.session) {
                this.attachToSession(terminal);
            }
        }
        else {
            // this.logger.info(`Terminal is NOT of type SerialTabComponent`)
            return;
        }
    }
    // detach (terminal: BaseTerminalTabComponent<any>): void {
    //     this.logger.info(`Detaching from session: ${terminal.title}`)
    // }
    attachToSession(terminal) {
        if (!terminal.session) {
            this.logger.warn(`Session is empty !`);
            return;
        }
        // this.logger.info(`Attaching to session: ${terminal.title}`)
        terminal.session.middleware.push(new _sessionMiddleware__WEBPACK_IMPORTED_MODULE_3__.SerialTimestampMiddleware(this.config, this.logger));
    }
};
SerialTimestampDecorator = __decorate([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)(),
    __metadata("design:paramtypes", [tabby_core__WEBPACK_IMPORTED_MODULE_2__.ConfigService,
        tabby_core__WEBPACK_IMPORTED_MODULE_2__.LogService])
], SerialTimestampDecorator);



/***/ }),

/***/ "@angular/common":
/*!**********************************!*\
  !*** external "@angular/common" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__angular_common__;

/***/ }),

/***/ "@angular/core":
/*!********************************!*\
  !*** external "@angular/core" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__angular_core__;

/***/ }),

/***/ "@angular/forms":
/*!*********************************!*\
  !*** external "@angular/forms" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__angular_forms__;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_fs__ === 'undefined') { var e = new Error("Cannot find module 'fs'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_fs__;

/***/ }),

/***/ "rxjs":
/*!***********************!*\
  !*** external "rxjs" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_rxjs__;

/***/ }),

/***/ "tabby-core":
/*!*****************************!*\
  !*** external "tabby-core" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_tabby_core__;

/***/ }),

/***/ "tabby-settings":
/*!*********************************!*\
  !*** external "tabby-settings" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_tabby_settings__;

/***/ }),

/***/ "tabby-terminal":
/*!*********************************!*\
  !*** external "tabby-terminal" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_tabby_terminal__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "@angular/core");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "@angular/common");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_common__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "@angular/forms");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_angular_forms__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tabby-core */ "tabby-core");
/* harmony import */ var tabby_core__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(tabby_core__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var tabby_settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tabby-settings */ "tabby-settings");
/* harmony import */ var tabby_settings__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(tabby_settings__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var tabby_terminal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tabby-terminal */ "tabby-terminal");
/* harmony import */ var tabby_terminal__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(tabby_terminal__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _configProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./configProvider */ "./src/configProvider.ts");
/* harmony import */ var _settingsTabProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./settingsTabProvider */ "./src/settingsTabProvider.ts");
/* harmony import */ var _settingsTab_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./settingsTab.component */ "./src/settingsTab.component.ts");
/* harmony import */ var _terminalDecorator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./terminalDecorator */ "./src/terminalDecorator.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};










let SerialTimestampModule = class SerialTimestampModule {
};
SerialTimestampModule = __decorate([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule)({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__.FormsModule,
            (tabby_core__WEBPACK_IMPORTED_MODULE_3___default()),
        ],
        providers: [
            { provide: tabby_core__WEBPACK_IMPORTED_MODULE_3__.ConfigProvider, useClass: _configProvider__WEBPACK_IMPORTED_MODULE_6__.SerialTimestampConfigProvider, multi: true },
            { provide: tabby_settings__WEBPACK_IMPORTED_MODULE_4__.SettingsTabProvider, useClass: _settingsTabProvider__WEBPACK_IMPORTED_MODULE_7__.SerialTimestampSettingsTabProvider, multi: true },
            { provide: tabby_terminal__WEBPACK_IMPORTED_MODULE_5__.TerminalDecorator, useClass: _terminalDecorator__WEBPACK_IMPORTED_MODULE_9__.SerialTimestampDecorator, multi: true },
        ],
        entryComponents: [
            _settingsTab_component__WEBPACK_IMPORTED_MODULE_8__.SerialTimestampSettingsTabComponent,
        ],
        declarations: [
            _settingsTab_component__WEBPACK_IMPORTED_MODULE_8__.SerialTimestampSettingsTabComponent,
        ],
    })
], SerialTimestampModule);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SerialTimestampModule);

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=index.js.map